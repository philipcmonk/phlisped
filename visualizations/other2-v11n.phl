#hash((0 . ((#s(triple 0 "has child" 18) #s(triple 0 "has child" 19) #s(triple 0 "has child" 17) #s(triple 0 "is written" -)))) (1 . ((#s(triple 1 "is written" define)) #s(triple 17 "has child" 1))) (- . (() #s(triple 3 "is written" -) #s(triple 6 "is written" -) #s(triple 9 "is written" -) #s(triple 10 "is written" -) #s(triple 11 "is written" -) #s(triple 16 "is written" -) #s(triple 17 "is written" -) #s(triple 18 "is written" -) #s(triple 19 "is written" -))) (format . (() #s(triple 8 "is written" format) #s(triple 13 "is written" format))) (define . (() #s(triple 1 "is written" define))) (provide . (() #s(triple 20 "is written" provide))) (require . (() #s(triple 22 "is written" require))) (identity . (())) (2 . ((#s(triple 2 "is written" visualization)) #s(triple 17 "has child" 2))) (3 . ((#s(triple 3 "has child" 4) #s(triple 3 "has child" 5) #s(triple 3 "has child" 7) #s(triple 3 "is written" -)) #s(triple 7 "has env" 3) #s(triple 17 "has child" 3))) (4 . ((#s(triple 4 "is written" make-linear-vertical-v11n)) #s(triple 3 "has child" 4))) (5 . ((#s(triple 5 "is written" |#:text-generator|)) #s(triple 3 "has child" 5))) (6 . ((#s(triple 6 "has child" 13) #s(triple 6 "has child" 15) #s(triple 6 "has child" 12) #s(triple 6 "is written" -)) #s(triple 7 "is defined as" 6) #s(triple 7 "is function" 6) #s(triple 12 "has env" 6))) (visualization . (() #s(triple 2 "is written" visualization) #s(triple 21 "is written" visualization))) (make-linear-vertical-v11n . (() #s(triple 4 "is written" make-linear-vertical-v11n))) (7 . ((#s(triple 7 "is defined as" 6) #s(triple 7 "has env" 3) #s(triple 7 "is function" 6) #s(triple 7 "has formal arg" 14)) #s(triple 3 "has child" 7))) (8 . ((#s(triple 8 "is written" format)))) (9 . ((#s(triple 9 "is written" -)))) (10 . ((#s(triple 10 "is written" -)))) (11 . ((#s(triple 11 "is written" -)))) (|#:text-generator| . (() #s(triple 5 "is written" |#:text-generator|))) (:text-generator . (())) (next-id . ((#s(triple next-id "is" 24)))) (a14 . (() #s(triple 14 "is reified as" a14))) (arger . (() #s(triple 14 "is written" arger))) (|"| . (())) (|"//~a"| . (() #s(triple 15 "is written" |"//~a"|))) (|"helpers/linear-vertical-v11n.rkt"| . (() #s(triple 23 "is written" |"helpers/linear-vertical-v11n.rkt"|))) (12 . ((#s(triple 12 "is defined as" 14) #s(triple 12 "has env" 6) #s(triple 12 "is named" text)) #s(triple 6 "has child" 12))) (13 . ((#s(triple 13 "is written" format)) #s(triple 6 "has child" 13))) (14 . ((#s(triple 14 "is written" arger) #s(triple 14 "is reified as" a14)) #s(triple 7 "has formal arg" 14) #s(triple 12 "is defined as" 14))) (15 . ((#s(triple 15 "is written" |"//~a"|)) #s(triple 6 "has child" 15))) (16 . ((#s(triple 16 "is written" -)))) (17 . ((#s(triple 17 "has child" 1) #s(triple 17 "has child" 2) #s(triple 17 "has child" 3) #s(triple 17 "is written" -)) #s(triple 0 "has child" 17))) (18 . ((#s(triple 18 "has child" 22) #s(triple 18 "has child" 23) #s(triple 18 "is written" -)) #s(triple 0 "has child" 18))) (19 . ((#s(triple 19 "has child" 20) #s(triple 19 "has child" 21) #s(triple 19 "is written" -)) #s(triple 0 "has child" 19))) (20 . ((#s(triple 20 "is written" provide)) #s(triple 19 "has child" 20))) (21 . ((#s(triple 21 "is written" visualization)) #s(triple 19 "has child" 21))) (22 . ((#s(triple 22 "is written" require)) #s(triple 18 "has child" 22))) (23 . ((#s(triple 23 "is written" |"helpers/linear-vertical-v11n.rkt"|)) #s(triple 18 "has child" 23))) (24 . (() #s(triple next-id "is" 24))) (text . (() #s(triple 12 "is named" text))))
