#hash((0 . ((#s(triple 0 "has child" 1) #s(triple 0 "has child" 2) #s(triple 0 "has child" 3) #s(triple 0 "is written" -)))) (map . (() #s(triple 24 "is written" map) #s(triple 285 "is written" map) #s(triple 292 "is written" map))) (ormap . (() #s(triple 504 "is written" ormap))) (1 . ((#s(triple 1 "is written" define)) #s(triple 0 "has child" 1) #s(triple 215 "is written" 1) #s(triple 296 "is written" 1) #s(triple 333 "is written" 1) #s(triple 344 "is written" 1) #s(triple 362 "is written" 1) #s(triple 368 "is written" 1) #s(triple 383 "is written" 1) #s(triple 413 "is written" 1))) (null . (() #s(triple 115 "is written" null) #s(triple 283 "is written" null))) (cdr . (() #s(triple 21 "is written" cdr) #s(triple 31 "is written" cdr))) (car . (() #s(triple 112 "is written" car))) (null? . (() #s(triple 203 "is written" null?) #s(triple 241 "is written" null?) #s(triple 277 "is written" null?) #s(triple 279 "is written" null?) #s(triple 498 "is written" null?))) (length . (() #s(triple 217 "is written" length) #s(triple 300 "is written" length) #s(triple 385 "is written" length) #s(triple 415 "is written" length))) (- . (() #s(triple 5 "is written" -) #s(triple 8 "is written" -) #s(triple 11 "is written" -) #s(triple 13 "is written" -) #s(triple 15 "is written" -) #s(triple 18 "is written" -) #s(triple 20 "is written" -) #s(triple 23 "is written" -) #s(triple 25 "is written" -) #s(triple 30 "is written" -) #s(triple 32 "is written" -) #s(triple 33 "is written" -) #s(triple 34 "is written" -) #s(triple 36 "is written" -) #s(triple 41 "is written" -) #s(triple 43 "is written" -) #s(triple 45 "is written" -) #s(triple 47 "is written" -) #s(triple 49 "is written" -) #s(triple 50 "is written" -) #s(triple 51 "is written" -) #s(triple 54 "is written" -) #s(triple 56 "is written" -) #s(triple 57 "is written" -) #s(triple 59 "is written" -) #s(triple 61 "is written" -) #s(triple 63 "is written" -) #s(triple 65 "is written" -) #s(triple 67 "is written" -) #s(triple 68 "is written" -) #s(triple 70 "is written" -) #s(triple 72 "is written" -) #s(triple 74 "is written" -) #s(triple 75 "is written" -) #s(triple 77 "is written" -) #s(triple 78 "is written" -) #s(triple 79 "is written" -) #s(triple 80 "is written" -) #s(triple 81 "is written" -) #s(triple 83 "is written" -) #s(triple 84 "is written" -) #s(triple 85 "is written" -) #s(triple 86 "is written" -) #s(triple 88 "is written" -) #s(triple 89 "is written" -) #s(triple 91 "is written" -) #s(triple 92 "is written" -) #s(triple 94 "is written" -) #s(triple 96 "is written" -) #s(triple 97 "is written" -) #s(triple 98 "is written" -) #s(triple 99 "is written" -) #s(triple 100 "is written" -) #s(triple 101 "is written" -) #s(triple 102 "is written" -) #s(triple 104 "is written" -) #s(triple 105 "is written" -) #s(triple 107 "is written" -) #s(triple 108 "is written" -) #s(triple 110 "is written" -) #s(triple 111 "is written" -) #s(triple 113 "is written" -) #s(triple 114 "is written" -) #s(triple 117 "is written" -) #s(triple 119 "is written" -) #s(triple 118 "is written" -) #s(triple 120 "is written" -) #s(triple 124 "is written" -) #s(triple 125 "is written" -) #s(triple 126 "is written" -) #s(triple 127 "is written" -) #s(triple 128 "is written" -) #s(triple 142 "is written" -) #s(triple 146 "is written" -) #s(triple 148 "is written" -) #s(triple 150 "is written" -) #s(triple 152 "is written" -) #s(triple 154 "is written" -) #s(triple 156 "is written" -) #s(triple 158 "is written" -) #s(triple 159 "is written" -) #s(triple 160 "is written" -) #s(triple 163 "is written" -) #s(triple 165 "is written" -) #s(triple 167 "is written" -) #s(triple 170 "is written" -) #s(triple 173 "is written" -) #s(triple 174 "is written" -) #s(triple 176 "is written" -) #s(triple 177 "is written" -) #s(triple 178 "is written" -) #s(triple 185 "is written" -) #s(triple 187 "is written" -) #s(triple 189 "is written" -) #s(triple 191 "is written" -) #s(triple 194 "is written" -) #s(triple 197 "is written" -) #s(triple 202 "is written" -) #s(triple 204 "is written" -) #s(triple 206 "is written" -) #s(triple 208 "is written" -) #s(triple 207 "is written" -) #s(triple 212 "is written" -) #s(triple 213 "is written" -) #s(triple 216 "is written" -) #s(triple 218 "is written" -) #s(triple 220 "is written" -) #s(triple 221 "is written" -) #s(triple 223 "is written" -) #s(triple 225 "is written" -) #s(triple 227 "is written" -) #s(triple 230 "is written" -) #s(triple 233 "is written" -) #s(triple 235 "is written" -) #s(triple 236 "is written" -) #s(triple 238 "is written" -) #s(triple 239 "is written" -) #s(triple 240 "is written" -) #s(triple 242 "is written" -) #s(triple 244 "is written" -) #s(triple 245 "is written" -) #s(triple 250 "is written" -) #s(triple 252 "is written" -) #s(triple 253 "is written" -) #s(triple 255 "is written" -) #s(triple 256 "is written" -) #s(triple 257 "is written" -) #s(triple 259 "is written" -) #s(triple 260 "is written" -) #s(triple 261 "is written" -) #s(triple 263 "is written" -) #s(triple 264 "is written" -) #s(triple 266 "is written" -) #s(triple 268 "is written" -) #s(triple 269 "is written" -) #s(triple 271 "is written" -) #s(triple 273 "is written" -) #s(triple 275 "is written" -) #s(triple 276 "is written" -) #s(triple 278 "is written" -) #s(triple 280 "is written" -) #s(triple 282 "is written" -) #s(triple 284 "is written" -) #s(triple 286 "is written" -) #s(triple 288 "is written" -) #s(triple 290 "is written" -) #s(triple 291 "is written" -) #s(triple 293 "is written" -) #s(triple 297 "is written" -) #s(triple 299 "is written" -) #s(triple 301 "is written" -) #s(triple 303 "is written" -) #s(triple 306 "is written" -) #s(triple 308 "is written" -) #s(triple 309 "is written" -) #s(triple 312 "is written" -) #s(triple 314 "is written" -) #s(triple 317 "is written" -) #s(triple 319 "is written" -) #s(triple 320 "is written" -) #s(triple 322 "is written" -) #s(triple 325 "is written" -) #s(triple 326 "is written" -) #s(triple 327 "is written" -) #s(triple 328 "is written" -) #s(triple 331 "is written" -) #s(triple 334 "is written" -) #s(triple 337 "is written" -) #s(triple 340 "is written" -) #s(triple 341 "is written" -) #s(triple 345 "is written" -) #s(triple 346 "is written" -) #s(triple 347 "is written" -) #s(triple 348 "is written" -) #s(triple 349 "is written" -) #s(triple 350 "is written" -) #s(triple 352 "is written" -) #s(triple 353 "is written" -) #s(triple 355 "is written" -) #s(triple 356 "is written" -) #s(triple 357 "is written" -) #s(triple 360 "is written" -) #s(triple 363 "is written" -) #s(triple 364 "is written" -) #s(triple 365 "is written" -) #s(triple 366 "is written" -) #s(triple 367 "is written" -) #s(triple 369 "is written" -) #s(triple 323 "is written" -) #s(triple 371 "is written" -) #s(triple 373 "is written" -) #s(triple 375 "is written" -) #s(triple 376 "is written" -) #s(triple 379 "is written" -) #s(triple 380 "is written" -) #s(triple 381 "is written" -) #s(triple 342 "is written" -) #s(triple 384 "is written" -) #s(triple 386 "is written" -) #s(triple 388 "is written" -) #s(triple 389 "is written" -) #s(triple 394 "is written" -) #s(triple 395 "is written" -) #s(triple 35 "is written" -) #s(triple 404 "is written" -) #s(triple 405 "is written" -) #s(triple 406 "is written" -) #s(triple 407 "is written" -) #s(triple 408 "is written" -) #s(triple 410 "is written" -) #s(triple 411 "is written" -) #s(triple 414 "is written" -) #s(triple 416 "is written" -) #s(triple 418 "is written" -) #s(triple 419 "is written" -) #s(triple 421 "is written" -) #s(triple 423 "is written" -) #s(triple 424 "is written" -) #s(triple 426 "is written" -) #s(triple 427 "is written" -) #s(triple 429 "is written" -) #s(triple 430 "is written" -) #s(triple 433 "is written" -) #s(triple 434 "is written" -) #s(triple 435 "is written" -) #s(triple 438 "is written" -) #s(triple 441 "is written" -) #s(triple 443 "is written" -) #s(triple 445 "is written" -) #s(triple 447 "is written" -) #s(triple 449 "is written" -) #s(triple 456 "is written" -) #s(triple 458 "is written" -) #s(triple 459 "is written" -) #s(triple 461 "is written" -) #s(triple 462 "is written" -) #s(triple 464 "is written" -) #s(triple 466 "is written" -) #s(triple 468 "is written" -) #s(triple 470 "is written" -) #s(triple 471 "is written" -) #s(triple 473 "is written" -) #s(triple 475 "is written" -) #s(triple 477 "is written" -) #s(triple 478 "is written" -) #s(triple 480 "is written" -) #s(triple 481 "is written" -) #s(triple 483 "is written" -) #s(triple 489 "is written" -) #s(triple 491 "is written" -) #s(triple 493 "is written" -) #s(triple 494 "is written" -) #s(triple 496 "is written" -) #s(triple 497 "is written" -) #s(triple 499 "is written" -) #s(triple 501 "is written" -) #s(triple 502 "is written" -) #s(triple 503 "is written" -) #s(triple 505 "is written" -) #s(triple 507 "is written" -) #s(triple 509 "is written" -) #s(triple 512 "is written" -) #s(triple 513 "is written" -) #s(triple 511 "is written" -) #s(triple 515 "is written" -) #s(triple 517 "is written" -) #s(triple 518 "is written" -) #s(triple 520 "is written" -) #s(triple 523 "is written" -) #s(triple 525 "is written" -) #s(triple 526 "is written" -) #s(triple 529 "is written" -) #s(triple 532 "is written" -) #s(triple 534 "is written" -) #s(triple 535 "is written" -) #s(triple 537 "is written" -) #s(triple 538 "is written" -) #s(triple 540 "is written" -) #s(triple 541 "is written" -) #s(triple 543 "is written" -) #s(triple 544 "is written" -) #s(triple 546 "is written" -) #s(triple 548 "is written" -) #s(triple 549 "is written" -) #s(triple 551 "is written" -) #s(triple 552 "is written" -) #s(triple 553 "is written" -) #s(triple 554 "is written" -) #s(triple 556 "is written" -) #s(triple 562 "is written" -) #s(triple 563 "is written" -) #s(triple 565 "is written" -) #s(triple 568 "is written" -) #s(triple 571 "is written" -) #s(triple 574 "is written" -) #s(triple 576 "is written" -) #s(triple 579 "is written" -) #s(triple 585 "is written" -) #s(triple 586 "is written" -) #s(triple 583 "is written" -) #s(triple 595 "is written" -) #s(triple 592 "is written" -) #s(triple 589 "is written" -) #s(triple 582 "is written" -) #s(triple 598 "is written" -) #s(triple 601 "is written" -) #s(triple 602 "is written" -) #s(triple 599 "is written" -) #s(triple 605 "is written" -) #s(triple 608 "is written" -) #s(triple 610 "is written" -) #s(triple 612 "is written" -) #s(triple 617 "is written" -) #s(triple 618 "is written" -) #s(triple 620 "is written" -) #s(triple 621 "is written" -) #s(triple 630 "is written" -) #s(triple 629 "is written" -) #s(triple 632 "is written" -) #s(triple 627 "is written" -) #s(triple 624 "is written" -) #s(triple 615 "is written" -) #s(triple 559 "is written" -) #s(triple 3 "is written" -) #s(triple 635 "is written" -) #s(triple 638 "is written" -) #s(triple 639 "is written" -) #s(triple 640 "is written" -) #s(triple 641 "is written" -))) (/ . (() #s(triple 27 "is written" /) #s(triple 48 "is written" /) #s(triple 62 "is written" /) #s(triple 211 "is written" /) #s(triple 370 "is written" /) #s(triple 409 "is written" /) #s(triple 577 "is written" /))) (+ . (() #s(triple 93 "is written" +) #s(triple 214 "is written" +) #s(triple 295 "is written" +) #s(triple 318 "is written" +) #s(triple 332 "is written" +) #s(triple 351 "is written" +) #s(triple 361 "is written" +) #s(triple 382 "is written" +) #s(triple 412 "is written" +) #s(triple 463 "is written" +) #s(triple 490 "is written" +) #s(triple 530 "is written" +) #s(triple 545 "is written" +) #s(triple 609 "is written" +) #s(triple 628 "is written" +))) (* . (() #s(triple 321 "is written" *) #s(triple 354 "is written" *) #s(triple 575 "is written" *) #s(triple 593 "is written" *))) (< . (() #s(triple 46 "is written" <) #s(triple 60 "is written" <) #s(triple 460 "is written" <) #s(triple 482 "is written" <) #s(triple 524 "is written" <) #s(triple 542 "is written" <))) (= . (() #s(triple 446 "is written" =) #s(triple 474 "is written" =))) (>= . (() #s(triple 516 "is written" >=) #s(triple 536 "is written" >=))) (display . (())) (eq? . (() #s(triple 16 "is written" eq?) #s(triple 192 "is written" eq?) #s(triple 228 "is written" eq?) #s(triple 307 "is written" eq?) #s(triple 374 "is written" eq?) #s(triple 564 "is written" eq?) #s(triple 584 "is written" eq?) #s(triple 600 "is written" eq?) #s(triple 616 "is written" eq?) #s(triple 619 "is written" eq?))) (if . (() #s(triple 14 "is written" if) #s(triple 42 "is written" if) #s(triple 270 "is written" if) #s(triple 305 "is written" if) #s(triple 372 "is written" if) #s(triple 440 "is written" if) #s(triple 510 "is written" if))) (quote . (() #s(triple 116 "is written" quote) #s(triple 161 "is written" quote) #s(triple 195 "is written" quote) #s(triple 231 "is written" quote) #s(triple 310 "is written" quote) #s(triple 329 "is written" quote) #s(triple 358 "is written" quote) #s(triple 377 "is written" quote) #s(triple 569 "is written" quote) #s(triple 587 "is written" quote) #s(triple 603 "is written" quote) #s(triple 622 "is written" quote))) (begin . (() #s(triple 10 "is written" begin) #s(triple 420 "is written" begin))) (dir . (() #s(triple 193 "is written" dir) #s(triple 229 "is written" dir) #s(triple 248 "is named" dir) #s(triple 566 "is named" dir))) (arg . (() #s(triple 315 "is named" arg))) (or . (() #s(triple 186 "is written" or) #s(triple 190 "is written" or) #s(triple 222 "is written" or) #s(triple 226 "is written" or) #s(triple 272 "is written" or) #s(triple 437 "is written" or) #s(triple 442 "is written" or))) (cond . (() #s(triple 561 "is written" cond))) (define . (() #s(triple 1 "is written" define))) (and . (() #s(triple 44 "is written" and) #s(triple 188 "is written" and) #s(triple 224 "is written" and) #s(triple 444 "is written" and) #s(triple 472 "is written" and) #s(triple 514 "is written" and))) (build-list . (() #s(triple 298 "is written" build-list))) (displayln . (() #s(triple 422 "is written" displayln) #s(triple 425 "is written" displayln) #s(triple 428 "is written" displayln) #s(triple 431 "is written" displayln))) (curry . (() #s(triple 26 "is written" curry) #s(triple 294 "is written" curry))) (identity . (() #s(triple 304 "is written" identity))) (2 . ((#s(triple 2 "is written" treemap-v11n)) #s(triple 0 "has child" 2))) (3 . ((#s(triple 3 "has child" 4) #s(triple 3 "has child" 5) #s(triple 3 "has child" 147) #s(triple 3 "has child" 436) #s(triple 3 "has child" 560) #s(triple 3 "is written" -)) #s(triple 0 "has child" 3) #s(triple 28 "is written" 3) #s(triple 147 "has env" 3) #s(triple 436 "has env" 3) #s(triple 560 "has env" 3))) (x . (() #s(triple 37 "is named" x) #s(triple 153 "is named" x) #s(triple 180 "is named" x) #s(triple 484 "is named" x))) (y . (() #s(triple 38 "is named" y) #s(triple 155 "is named" y) #s(triple 181 "is named" y) #s(triple 467 "is named" y))) (center . (() #s(triple 76 "is named" center))) (event . (() #s(triple 642 "is named" event))) (right . (() #s(triple 623 "is written" right))) (left . (() #s(triple 604 "is written" left))) (down . (() #s(triple 588 "is written" down))) (box-width . (() #s(triple 251 "is written" box-width))) (4 . ((#s(triple 4 "is written" v11n)) #s(triple 3 "has child" 4))) (5 . ((#s(triple 5 "has child" 6) #s(triple 5 "has child" 7) #s(triple 5 "has child" 9) #s(triple 5 "has child" 121) #s(triple 5 "has child" 123) #s(triple 5 "is written" -)) #s(triple 9 "has env" 5) #s(triple 123 "has env" 5) #s(triple 3 "has child" 5))) (node-text-func . (() #s(triple 254 "is written" node-text-func))) (text-w . (() #s(triple 52 "is named" text-w))) (w . (() #s(triple 58 "is named" w) #s(triple 209 "is named" w))) (text-h . (() #s(triple 64 "is named" text-h))) (h . (() #s(triple 69 "is named" h) #s(triple 246 "is named" h))) (clr . (() #s(triple 22 "is written" clr) #s(triple 29 "is named" clr))) (utterance-x . (() #s(triple 492 "is written" utterance-x) #s(triple 539 "is written" utterance-x) #s(triple 547 "is written" utterance-x))) (utterance-w . (() #s(triple 448 "is written" utterance-w) #s(triple 495 "is written" utterance-w))) (utterance-y . (() #s(triple 465 "is written" utterance-y) #s(triple 519 "is written" utterance-y) #s(triple 527 "is written" utterance-y))) (utterance-h . (() #s(triple 469 "is written" utterance-h) #s(triple 476 "is written" utterance-h))) (utterance-args . (() #s(triple 500 "is written" utterance-args) #s(triple 508 "is written" utterance-args))) (v11n . (() #s(triple 4 "is written" v11n))) (whole-tree . (())) (whole-tree-offset-x . (() #s(triple 87 "is written" whole-tree-offset-x))) (whole-tree-w . (() #s(triple 90 "is written" whole-tree-w) #s(triple 169 "is written" whole-tree-w))) (whole-tree-h . (() #s(triple 109 "is written" whole-tree-h) #s(triple 172 "is written" whole-tree-h))) (whole-tree-zoom . (() #s(triple 55 "is written" whole-tree-zoom) #s(triple 66 "is written" whole-tree-zoom) #s(triple 580 "is written" whole-tree-zoom) #s(triple 596 "is written" whole-tree-zoom))) (whole-tree-offset-y . (() #s(triple 103 "is written" whole-tree-offset-y) #s(triple 106 "is written" whole-tree-offset-y) #s(triple 613 "is written" whole-tree-offset-y) #s(triple 633 "is written" whole-tree-offset-y))) (set-whole-tree-zoom! . (() #s(triple 572 "is written" set-whole-tree-zoom!) #s(triple 590 "is written" set-whole-tree-zoom!))) (set-whole-tree-offset-y! . (() #s(triple 606 "is written" set-whole-tree-offset-y!) #s(triple 625 "is written" set-whole-tree-offset-y!))) (find-utterance . (() #s(triple 439 "is named" find-utterance))) (Selected-tree . (() #s(triple 17 "is written" Selected-tree) #s(triple 573 "is written" Selected-tree) #s(triple 581 "is written" Selected-tree) #s(triple 591 "is written" Selected-tree) #s(triple 597 "is written" Selected-tree) #s(triple 607 "is written" Selected-tree) #s(triple 614 "is written" Selected-tree) #s(triple 626 "is written" Selected-tree) #s(triple 634 "is written" Selected-tree))) (tree . (() #s(triple 19 "is named" tree) #s(triple 171 "is named" tree) #s(triple 201 "is named" tree) #s(triple 237 "is written" tree) #s(triple 636 "is named" tree))) (PADDING . (() #s(triple 53 "is written" PADDING) #s(triple 82 "is written" PADDING))) (n . (() #s(triple 151 "is named" n) #s(triple 179 "is named" n) #s(triple 199 "is written" n))) (node-args . (() #s(triple 205 "is written" node-args) #s(triple 219 "is written" node-args) #s(triple 243 "is written" node-args) #s(triple 281 "is written" node-args) #s(triple 289 "is written" node-args) #s(triple 302 "is written" node-args) #s(triple 387 "is written" node-args) #s(triple 417 "is written" node-args))) (SCROLLDIST . (() #s(triple 611 "is written" SCROLLDIST) #s(triple 631 "is written" SCROLLDIST))) (draw-rectangle . (() #s(triple 12 "is written" draw-rectangle))) (draw-text . (() #s(triple 71 "is written" draw-text))) (closed? . (() #s(triple 198 "is written" closed?) #s(triple 234 "is written" closed?) #s(triple 274 "is written" closed?))) (box-height . (() #s(triple 258 "is written" box-height))) (u . (() #s(triple 143 "is written" u))) (get-color . (() #s(triple 267 "is written" get-color))) (def-painter . (() #s(triple 6 "is written" def-painter))) (siblings . (() #s(triple 166 "is named" siblings))) (row . (() #s(triple 164 "is named" row) #s(triple 335 "is named" row))) (6 . ((#s(triple 6 "is written" def-painter)) #s(triple 5 "has child" 6))) (7 . ((#s(triple 7 "is written" |#:drawer|)) #s(triple 5 "has child" 7))) (treemap-v11n . (() #s(triple 2 "is written" treemap-v11n))) (treemap-utterance-total-width . (() #s(triple 400 "is written" treemap-utterance-total-width) #s(triple 457 "is written" treemap-utterance-total-width) #s(triple 550 "is written" treemap-utterance-total-width))) (treemap-utterance . (() #s(triple 175 "is written" treemap-utterance))) (treemap-utterance-total-height . (() #s(triple 402 "is written" treemap-utterance-total-height) #s(triple 479 "is written" treemap-utterance-total-height) #s(triple 533 "is written" treemap-utterance-total-height))) (root . (() #s(triple 450 "is named" root) #s(triple 453 "is named" root))) (child . (() #s(triple 182 "is written" child) #s(triple 183 "is written" child) #s(triple 184 "is written" child) #s(triple 210 "is written" child) #s(triple 200 "is written" child) #s(triple 247 "is written" child) #s(triple 249 "is written" child) #s(triple 336 "is written" child) #s(triple 390 "is written" child) #s(triple 451 "is written" child) #s(triple 521 "is named" child) #s(triple 528 "is written" child))) (8 . ((#s(triple 8 "has child" 10) #s(triple 8 "has child" 11) #s(triple 8 "has child" 41) #s(triple 8 "is written" -)) #s(triple 9 "is defined as" 8) #s(triple 9 "is function" 8) #s(triple 19 "has env" 8) #s(triple 29 "has env" 8) #s(triple 37 "has env" 8) #s(triple 38 "has env" 8) #s(triple 58 "has env" 8) #s(triple 69 "has env" 8))) (9 . ((#s(triple 9 "is defined as" 8) #s(triple 9 "has env" 5) #s(triple 9 "is function" 8) #s(triple 9 "has formal arg" 134) #s(triple 9 "has formal arg" 135) #s(triple 9 "has formal arg" 136) #s(triple 9 "has formal arg" 137) #s(triple 9 "has formal arg" 138) #s(triple 9 "has formal arg" 139) #s(triple 9 "has formal arg" 140) #s(triple 9 "has formal arg" 141) #s(triple 9 "has formal arg" 143) #s(triple 9 "has formal arg" 144) #s(triple 9 "has formal arg" 145)) #s(triple 5 "has child" 9))) (10 . ((#s(triple 10 "is written" begin)) #s(triple 8 "has child" 10))) (11 . ((#s(triple 11 "has child" 12) #s(triple 11 "has child" 13) #s(triple 11 "has child" 37) #s(triple 11 "has child" 38) #s(triple 11 "has child" 39) #s(triple 11 "has child" 40) #s(triple 11 "is written" -)) #s(triple 39 "has env" 11) #s(triple 40 "has env" 11) #s(triple 8 "has child" 11))) (|#:drawer| . (() #s(triple 7 "is written" |#:drawer|))) (next-id . ((#s(triple next-id "is" 644)))) (t-w . (() #s(triple 39 "is named" t-w))) (t-h . (() #s(triple 40 "is named" t-h))) (|-3| . (() #s(triple 95 "is written" |-3|))) (NULL . (())) (a129 . (() #s(triple 129 "is reified as" a129))) (arger . (() #s(triple 129 "is written" arger) #s(triple 130 "is written" arger) #s(triple 131 "is written" arger) #s(triple 132 "is written" arger) #s(triple 133 "is written" arger) #s(triple 134 "is written" arger) #s(triple 135 "is written" arger) #s(triple 136 "is written" arger) #s(triple 137 "is written" arger) #s(triple 138 "is written" arger) #s(triple 139 "is written" arger) #s(triple 140 "is written" arger) #s(triple 141 "is written" arger) #s(triple 144 "is written" arger) #s(triple 145 "is written" arger) #s(triple 316 "is written" arger) #s(triple 339 "is written" arger) #s(triple 391 "is written" arger) #s(triple 392 "is written" arger) #s(triple 393 "is written" arger) #s(triple 396 "is written" arger) #s(triple 397 "is written" arger) #s(triple 398 "is written" arger) #s(triple 399 "is written" arger) #s(triple 455 "is written" arger) #s(triple 487 "is written" arger) #s(triple 488 "is written" arger) #s(triple 522 "is written" arger) #s(triple 558 "is written" arger) #s(triple 567 "is written" arger) #s(triple 637 "is written" arger) #s(triple 643 "is written" arger))) (a130 . (() #s(triple 130 "is reified as" a130))) (a131 . (() #s(triple 131 "is reified as" a131))) (a132 . (() #s(triple 132 "is reified as" a132))) (a133 . (() #s(triple 133 "is reified as" a133))) (|#:invisible?| . (() #s(triple 121 "is written" |#:invisible?|))) (|#f| . (() #s(triple 122 "is written" |#f|) #s(triple 555 "is written" |#f|))) (a136 . (() #s(triple 136 "is reified as" a136))) (a134 . (() #s(triple 134 "is reified as" a134))) (a137 . (() #s(triple 137 "is reified as" a137))) (a135 . (() #s(triple 135 "is reified as" a135))) (a138 . (() #s(triple 138 "is reified as" a138))) (a141 . (() #s(triple 141 "is reified as" a141))) (a139 . (() #s(triple 139 "is reified as" a139))) (a143 . (() #s(triple 143 "is reified as" a143) #s(triple 401 "is written" a143) #s(triple 403 "is written" a143))) (a140 . (() #s(triple 140 "is reified as" a140))) (a144 . (() #s(triple 144 "is reified as" a144))) (a145 . (() #s(triple 145 "is reified as" a145))) (horizontal . (() #s(triple 162 "is written" horizontal) #s(triple 232 "is written" horizontal) #s(triple 311 "is written" horizontal) #s(triple 359 "is written" horizontal) #s(triple 378 "is written" horizontal))) (node->utterance . (() #s(triple 149 "is named" node->utterance))) (tre . (() #s(triple 168 "is named" tre))) (a182 . (() #s(triple 182 "is reified as" a182))) (a183 . (() #s(triple 183 "is reified as" a183))) (a184 . (() #s(triple 184 "is reified as" a184))) (vertical . (() #s(triple 196 "is written" vertical) #s(triple 330 "is written" vertical))) (a210 . (() #s(triple 210 "is reified as" a210))) (a247 . (() #s(triple 247 "is reified as" a247))) (a249 . (() #s(triple 249 "is reified as" a249))) (children . (() #s(triple 265 "is named" children))) (node-utterance . (() #s(triple 313 "is written" node-utterance))) (a316 . (() #s(triple 316 "is reified as" a316))) (child-wh . (() #s(triple 324 "is named" child-wh))) (XXX . (())) (a336 . (() #s(triple 336 "is reified as" a336))) (a339 . (() #s(triple 339 "is reified as" a339))) (inner-n . (() #s(triple 338 "is named" inner-n))) (num-args . (() #s(triple 343 "is named" num-args))) (a390 . (() #s(triple 390 "is reified as" a390))) (a391 . (() #s(triple 391 "is reified as" a391))) (a392 . (() #s(triple 392 "is reified as" a392))) (a393 . (() #s(triple 393 "is reified as" a393))) (a396 . (() #s(triple 396 "is reified as" a396))) (a397 . (() #s(triple 397 "is reified as" a397))) (a398 . (() #s(triple 398 "is reified as" a398))) (a399 . (() #s(triple 399 "is reified as" a399))) (|"t"| . (() #s(triple 432 "is written" |"t"|))) (a455 . (() #s(triple 455 "is reified as" a455))) (a451 . (() #s(triple 451 "is reified as" a451))) (uuterance-h . (())) (a487 . (() #s(triple 487 "is reified as" a487))) (a488 . (() #s(triple 488 "is reified as" a488))) (a522 . (() #s(triple 522 "is reified as" a522))) (a567 . (() #s(triple 567 "is reified as" a567))) (whole-tree-offest-y . (())) (--- . (() #s(triple 560 "is named" ---))) (a637 . (() #s(triple 637 "is reified as" a637))) (12 . ((#s(triple 12 "is written" draw-rectangle)) #s(triple 11 "has child" 12))) (13 . ((#s(triple 13 "has child" 14) #s(triple 13 "has child" 15) #s(triple 13 "has child" 20) #s(triple 13 "has child" 23) #s(triple 13 "is written" -)) #s(triple 11 "has child" 13))) (14 . ((#s(triple 14 "is written" if)) #s(triple 13 "has child" 14))) (15 . ((#s(triple 15 "has child" 16) #s(triple 15 "has child" 17) #s(triple 15 "has child" 19) #s(triple 15 "is written" -)) #s(triple 13 "has child" 15))) (16 . ((#s(triple 16 "is written" eq?)) #s(triple 15 "has child" 16))) (17 . ((#s(triple 17 "is written" Selected-tree)) #s(triple 15 "has child" 17))) (18 . ((#s(triple 18 "is written" -)))) (19 . ((#s(triple 19 "is defined as" 144) #s(triple 19 "has env" 8) #s(triple 19 "is named" tree)) #s(triple 15 "has child" 19) #s(triple 54 "has child" 19) #s(triple 65 "has child" 19) #s(triple 86 "has child" 19) #s(triple 89 "has child" 19) #s(triple 105 "has child" 19) #s(triple 108 "has child" 19) #s(triple 70 "has child" 19))) (a643 . (() #s(triple 643 "is reified as" a643))) (20 . ((#s(triple 20 "has child" 21) #s(triple 20 "has child" 29) #s(triple 20 "is written" -)) #s(triple 13 "has child" 20))) (21 . ((#s(triple 21 "is written" cdr)) #s(triple 20 "has child" 21))) (22 . ((#s(triple 22 "is written" clr)))) (23 . ((#s(triple 23 "has child" 24) #s(triple 23 "has child" 25) #s(triple 23 "has child" 30) #s(triple 23 "is written" -)) #s(triple 13 "has child" 23))) (24 . ((#s(triple 24 "is written" map)) #s(triple 23 "has child" 24))) (25 . ((#s(triple 25 "has child" 26) #s(triple 25 "has child" 27) #s(triple 25 "has child" 28) #s(triple 25 "is written" -)) #s(triple 23 "has child" 25))) (26 . ((#s(triple 26 "is written" curry)) #s(triple 25 "has child" 26))) (27 . ((#s(triple 27 "is written" /)) #s(triple 25 "has child" 27))) (28 . ((#s(triple 28 "is written" 3)) #s(triple 25 "has child" 28))) (29 . ((#s(triple 29 "is defined as" 141) #s(triple 29 "has env" 8) #s(triple 29 "is named" clr)) #s(triple 20 "has child" 29) #s(triple 30 "has child" 29) #s(triple 111 "has child" 29))) (30 . ((#s(triple 30 "has child" 31) #s(triple 30 "has child" 29) #s(triple 30 "is written" -)) #s(triple 23 "has child" 30))) (31 . ((#s(triple 31 "is written" cdr)) #s(triple 30 "has child" 31))) (32 . ((#s(triple 32 "is written" -)))) (33 . ((#s(triple 33 "is written" -)))) (34 . ((#s(triple 34 "is written" -)))) (35 . ((#s(triple 35 "has child" 400) #s(triple 35 "has child" 401) #s(triple 35 "is written" -)) #s(triple 39 "is defined as" 35))) (36 . ((#s(triple 36 "has child" 402) #s(triple 36 "has child" 403) #s(triple 36 "is written" -)) #s(triple 40 "is defined as" 36))) (37 . ((#s(triple 37 "is defined as" 135) #s(triple 37 "has env" 8) #s(triple 37 "is named" x)) #s(triple 11 "has child" 37) #s(triple 74 "has child" 37))) (38 . ((#s(triple 38 "is defined as" 136) #s(triple 38 "has env" 8) #s(triple 38 "is named" y)) #s(triple 11 "has child" 38) #s(triple 96 "has child" 38))) (39 . ((#s(triple 39 "is defined as" 35) #s(triple 39 "has env" 11) #s(triple 39 "is named" t-w)) #s(triple 11 "has child" 39))) (40 . ((#s(triple 40 "is defined as" 36) #s(triple 40 "has env" 11) #s(triple 40 "is named" t-h)) #s(triple 11 "has child" 40))) (41 . ((#s(triple 41 "has child" 42) #s(triple 41 "has child" 43) #s(triple 41 "has child" 70) #s(triple 41 "has child" 115) #s(triple 41 "is written" -)) #s(triple 8 "has child" 41) #s(triple 52 "has env" 41) #s(triple 64 "has env" 41))) (42 . ((#s(triple 42 "is written" if)) #s(triple 41 "has child" 42))) (43 . ((#s(triple 43 "has child" 44) #s(triple 43 "has child" 45) #s(triple 43 "has child" 59) #s(triple 43 "is written" -)) #s(triple 41 "has child" 43))) (44 . ((#s(triple 44 "is written" and)) #s(triple 43 "has child" 44))) (45 . ((#s(triple 45 "has child" 46) #s(triple 45 "has child" 47) #s(triple 45 "has child" 58) #s(triple 45 "is written" -)) #s(triple 43 "has child" 45))) (46 . ((#s(triple 46 "is written" <)) #s(triple 45 "has child" 46))) (47 . ((#s(triple 47 "has child" 48) #s(triple 47 "has child" 49) #s(triple 47 "has child" 54) #s(triple 47 "is written" -)) #s(triple 45 "has child" 47))) (48 . ((#s(triple 48 "is written" /)) #s(triple 47 "has child" 48))) (49 . ((#s(triple 49 "has child" 50) #s(triple 49 "has child" 52) #s(triple 49 "has child" 53) #s(triple 49 "is written" -)) #s(triple 47 "has child" 49))) (50 . ((#s(triple 50 "is written" -)) #s(triple 49 "has child" 50))) (51 . ((#s(triple 51 "is written" -)))) (52 . ((#s(triple 52 "is defined as" 139) #s(triple 52 "has env" 41) #s(triple 52 "is named" text-w)) #s(triple 49 "has child" 52) #s(triple 79 "has child" 52))) (53 . ((#s(triple 53 "is written" PADDING)) #s(triple 49 "has child" 53))) (54 . ((#s(triple 54 "has child" 55) #s(triple 54 "has child" 19) #s(triple 54 "is written" -)) #s(triple 47 "has child" 54))) (55 . ((#s(triple 55 "is written" whole-tree-zoom)) #s(triple 54 "has child" 55))) (56 . ((#s(triple 56 "is written" -)))) (57 . ((#s(triple 57 "is written" -)))) (58 . ((#s(triple 58 "is defined as" 137) #s(triple 58 "has env" 8) #s(triple 58 "is named" w)) #s(triple 45 "has child" 58) #s(triple 74 "has child" 58))) (59 . ((#s(triple 59 "has child" 60) #s(triple 59 "has child" 61) #s(triple 59 "has child" 69) #s(triple 59 "is written" -)) #s(triple 43 "has child" 59))) (60 . ((#s(triple 60 "is written" <)) #s(triple 59 "has child" 60))) (61 . ((#s(triple 61 "has child" 62) #s(triple 61 "has child" 64) #s(triple 61 "has child" 65) #s(triple 61 "is written" -)) #s(triple 59 "has child" 61))) (62 . ((#s(triple 62 "is written" /)) #s(triple 61 "has child" 62))) (63 . ((#s(triple 63 "is written" -)))) (65 . ((#s(triple 65 "has child" 66) #s(triple 65 "has child" 19) #s(triple 65 "is written" -)) #s(triple 61 "has child" 65))) (64 . ((#s(triple 64 "is defined as" 140) #s(triple 64 "has env" 41) #s(triple 64 "is named" text-h)) #s(triple 61 "has child" 64) #s(triple 92 "has child" 64) #s(triple 96 "has child" 64))) (67 . ((#s(triple 67 "is written" -)))) (66 . ((#s(triple 66 "is written" whole-tree-zoom)) #s(triple 65 "has child" 66))) (69 . ((#s(triple 69 "is defined as" 138) #s(triple 69 "has env" 8) #s(triple 69 "is named" h)) #s(triple 59 "has child" 69) #s(triple 96 "has child" 69))) (68 . ((#s(triple 68 "is written" -)))) (71 . ((#s(triple 71 "is written" draw-text)) #s(triple 70 "has child" 71))) (70 . ((#s(triple 70 "has child" 71) #s(triple 70 "has child" 73) #s(triple 70 "has child" 74) #s(triple 70 "has child" 92) #s(triple 70 "has child" 111) #s(triple 70 "has child" 19) #s(triple 70 "is written" -)) #s(triple 73 "has env" 70) #s(triple 76 "has env" 70) #s(triple 41 "has child" 70))) (73 . ((#s(triple 73 "is defined as" 134) #s(triple 73 "has env" 70) #s(triple 73 "is named" text)) #s(triple 70 "has child" 73))) (72 . ((#s(triple 72 "is written" -)))) (75 . ((#s(triple 75 "is written" -)))) (74 . ((#s(triple 74 "has child" 76) #s(triple 74 "has child" 37) #s(triple 74 "has child" 58) #s(triple 74 "has child" 79) #s(triple 74 "has child" 84) #s(triple 74 "has child" 89) #s(triple 74 "is written" -)) #s(triple 70 "has child" 74))) (77 . ((#s(triple 77 "is written" -)))) (76 . ((#s(triple 76 "is defined as" 145) #s(triple 76 "has env" 70) #s(triple 76 "is named" center)) #s(triple 74 "has child" 76) #s(triple 96 "has child" 76))) (79 . ((#s(triple 79 "has child" 80) #s(triple 79 "has child" 52) #s(triple 79 "has child" 82) #s(triple 79 "is written" -)) #s(triple 74 "has child" 79))) (78 . ((#s(triple 78 "is written" -)))) (81 . ((#s(triple 81 "is written" -)))) (80 . ((#s(triple 80 "is written" -)) #s(triple 79 "has child" 80))) (83 . ((#s(triple 83 "is written" -)))) (82 . ((#s(triple 82 "is written" PADDING)) #s(triple 79 "has child" 82))) (85 . ((#s(triple 85 "is written" -)) #s(triple 84 "has child" 85))) (84 . ((#s(triple 84 "has child" 85) #s(triple 84 "has child" 86) #s(triple 84 "is written" -)) #s(triple 74 "has child" 84))) (87 . ((#s(triple 87 "is written" whole-tree-offset-x)) #s(triple 86 "has child" 87))) (86 . ((#s(triple 86 "has child" 87) #s(triple 86 "has child" 19) #s(triple 86 "is written" -)) #s(triple 84 "has child" 86))) (89 . ((#s(triple 89 "has child" 90) #s(triple 89 "has child" 19) #s(triple 89 "is written" -)) #s(triple 74 "has child" 89))) (88 . ((#s(triple 88 "is written" -)))) (91 . ((#s(triple 91 "is written" -)))) (90 . ((#s(triple 90 "is written" whole-tree-w)) #s(triple 89 "has child" 90))) (93 . ((#s(triple 93 "is written" +)) #s(triple 92 "has child" 93))) (92 . ((#s(triple 92 "has child" 93) #s(triple 92 "has child" 64) #s(triple 92 "has child" 95) #s(triple 92 "has child" 96) #s(triple 92 "is written" -)) #s(triple 70 "has child" 92))) (95 . ((#s(triple 95 "is written" |-3|)) #s(triple 92 "has child" 95))) (94 . ((#s(triple 94 "is written" -)))) (97 . ((#s(triple 97 "is written" -)))) (96 . ((#s(triple 96 "has child" 76) #s(triple 96 "has child" 38) #s(triple 96 "has child" 69) #s(triple 96 "has child" 64) #s(triple 96 "has child" 101) #s(triple 96 "has child" 108) #s(triple 96 "is written" -)) #s(triple 92 "has child" 96))) (99 . ((#s(triple 99 "is written" -)))) (98 . ((#s(triple 98 "is written" -)))) (101 . ((#s(triple 101 "has child" 102) #s(triple 101 "has child" 105) #s(triple 101 "is written" -)) #s(triple 96 "has child" 101))) (100 . ((#s(triple 100 "is written" -)))) (103 . ((#s(triple 103 "is written" whole-tree-offset-y)))) (102 . ((#s(triple 102 "is written" -)) #s(triple 101 "has child" 102))) (105 . ((#s(triple 105 "has child" 106) #s(triple 105 "has child" 19) #s(triple 105 "is written" -)) #s(triple 101 "has child" 105))) (104 . ((#s(triple 104 "is written" -)))) (107 . ((#s(triple 107 "is written" -)))) (106 . ((#s(triple 106 "is written" whole-tree-offset-y)) #s(triple 105 "has child" 106))) (109 . ((#s(triple 109 "is written" whole-tree-h)) #s(triple 108 "has child" 109))) (108 . ((#s(triple 108 "has child" 109) #s(triple 108 "has child" 19) #s(triple 108 "is written" -)) #s(triple 96 "has child" 108))) (111 . ((#s(triple 111 "has child" 112) #s(triple 111 "has child" 29) #s(triple 111 "is written" -)) #s(triple 70 "has child" 111))) (110 . ((#s(triple 110 "is written" -)))) (113 . ((#s(triple 113 "is written" -)))) (112 . ((#s(triple 112 "is written" car)) #s(triple 111 "has child" 112))) (115 . ((#s(triple 115 "is written" null)) #s(triple 41 "has child" 115))) (114 . ((#s(triple 114 "is written" -)))) (117 . ((#s(triple 117 "has child" 118) #s(triple 117 "is written" -)))) (116 . ((#s(triple 116 "is written" quote)))) (119 . ((#s(triple 119 "is written" -)))) (118 . ((#s(triple 118 "is written" -)) #s(triple 117 "has child" 118))) (121 . ((#s(triple 121 "is written" |#:invisible?|)) #s(triple 5 "has child" 121))) (120 . ((#s(triple 120 "is written" -)))) (123 . ((#s(triple 123 "is defined as" 122) #s(triple 123 "has env" 5) #s(triple 123 "is function" 122) #s(triple 123 "has formal arg" 129) #s(triple 123 "has formal arg" 130) #s(triple 123 "has formal arg" 131) #s(triple 123 "has formal arg" 132) #s(triple 123 "has formal arg" 133)) #s(triple 5 "has child" 123))) (122 . ((#s(triple 122 "is written" |#f|)) #s(triple 123 "is defined as" 122) #s(triple 123 "is function" 122))) (125 . ((#s(triple 125 "is written" -)))) (124 . ((#s(triple 124 "is written" -)))) (127 . ((#s(triple 127 "is written" -)))) (126 . ((#s(triple 126 "is written" -)))) (130 . ((#s(triple 130 "is written" arger) #s(triple 130 "is reified as" a130)) #s(triple 123 "has formal arg" 130))) (131 . ((#s(triple 131 "is written" arger) #s(triple 131 "is reified as" a131)) #s(triple 123 "has formal arg" 131))) (128 . ((#s(triple 128 "is written" -)))) (129 . ((#s(triple 129 "is written" arger) #s(triple 129 "is reified as" a129)) #s(triple 123 "has formal arg" 129))) (134 . ((#s(triple 134 "is written" arger) #s(triple 134 "is reified as" a134)) #s(triple 9 "has formal arg" 134) #s(triple 73 "is defined as" 134))) (135 . ((#s(triple 135 "is written" arger) #s(triple 135 "is reified as" a135)) #s(triple 9 "has formal arg" 135) #s(triple 37 "is defined as" 135))) (132 . ((#s(triple 132 "is written" arger) #s(triple 132 "is reified as" a132)) #s(triple 123 "has formal arg" 132))) (133 . ((#s(triple 133 "is written" arger) #s(triple 133 "is reified as" a133)) #s(triple 123 "has formal arg" 133))) (138 . ((#s(triple 138 "is written" arger) #s(triple 138 "is reified as" a138)) #s(triple 9 "has formal arg" 138) #s(triple 69 "is defined as" 138))) (139 . ((#s(triple 139 "is written" arger) #s(triple 139 "is reified as" a139)) #s(triple 9 "has formal arg" 139) #s(triple 52 "is defined as" 139))) (136 . ((#s(triple 136 "is written" arger) #s(triple 136 "is reified as" a136)) #s(triple 9 "has formal arg" 136) #s(triple 38 "is defined as" 136))) (137 . ((#s(triple 137 "is written" arger) #s(triple 137 "is reified as" a137)) #s(triple 9 "has formal arg" 137) #s(triple 58 "is defined as" 137))) (142 . ((#s(triple 142 "is written" -)))) (143 . ((#s(triple 143 "is written" u) #s(triple 143 "is reified as" a143)) #s(triple 9 "has formal arg" 143))) (140 . ((#s(triple 140 "is written" arger) #s(triple 140 "is reified as" a140)) #s(triple 9 "has formal arg" 140) #s(triple 64 "is defined as" 140))) (141 . ((#s(triple 141 "is written" arger) #s(triple 141 "is reified as" a141)) #s(triple 9 "has formal arg" 141) #s(triple 29 "is defined as" 141))) (146 . ((#s(triple 146 "has child" 149) #s(triple 146 "has child" 151) #s(triple 146 "has child" 153) #s(triple 146 "has child" 155) #s(triple 146 "has child" 158) #s(triple 146 "has child" 159) #s(triple 146 "has child" 160) #s(triple 146 "has child" 164) #s(triple 146 "has child" 171) #s(triple 146 "is written" -)) #s(triple 147 "is defined as" 146) #s(triple 147 "is function" 146) #s(triple 149 "has env" 146) #s(triple 151 "has env" 146) #s(triple 153 "has env" 146) #s(triple 155 "has env" 146) #s(triple 157 "has env" 146) #s(triple 164 "has env" 146) #s(triple 166 "has env" 146) #s(triple 168 "has env" 146) #s(triple 171 "has env" 146))) (147 . ((#s(triple 147 "is defined as" 146) #s(triple 147 "has env" 3) #s(triple 147 "is function" 146) #s(triple 147 "has formal arg" 391) #s(triple 147 "has formal arg" 392) #s(triple 147 "has formal arg" 393) #s(triple 147 "has formal arg" 396) #s(triple 147 "has formal arg" 397) #s(triple 147 "has formal arg" 398) #s(triple 147 "has formal arg" 399)) #s(triple 3 "has child" 147))) (144 . ((#s(triple 144 "is written" arger) #s(triple 144 "is reified as" a144)) #s(triple 9 "has formal arg" 144) #s(triple 19 "is defined as" 144))) (145 . ((#s(triple 145 "is written" arger) #s(triple 145 "is reified as" a145)) #s(triple 9 "has formal arg" 145) #s(triple 76 "is defined as" 145))) (150 . ((#s(triple 150 "is written" -)))) (151 . ((#s(triple 151 "is defined as" 391) #s(triple 151 "has env" 146) #s(triple 151 "is named" n)) #s(triple 146 "has child" 151))) (148 . ((#s(triple 148 "has child" 175) #s(triple 148 "has child" 179) #s(triple 148 "has child" 180) #s(triple 148 "has child" 181) #s(triple 148 "has child" 185) #s(triple 148 "has child" 221) #s(triple 148 "has child" 250) #s(triple 148 "has child" 257) #s(triple 148 "has child" 265) #s(triple 148 "has child" 266) #s(triple 148 "has child" 209) #s(triple 148 "has child" 246) #s(triple 148 "is written" -)) #s(triple 149 "is defined as" 148) #s(triple 149 "is function" 148) #s(triple 179 "has env" 148) #s(triple 209 "has env" 148) #s(triple 180 "has env" 148) #s(triple 181 "has env" 148) #s(triple 201 "has env" 148) #s(triple 248 "has env" 148) #s(triple 262 "has env" 148) #s(triple 265 "has env" 148) #s(triple 246 "has env" 148) #s(triple 335 "has env" 148))) (149 . ((#s(triple 149 "is defined as" 148) #s(triple 149 "has env" 146) #s(triple 149 "is function" 148) #s(triple 149 "is named" node->utterance) #s(triple 149 "has formal arg" 182) #s(triple 149 "has formal arg" 183) #s(triple 149 "has formal arg" 184) #s(triple 149 "has formal arg" 210) #s(triple 149 "has formal arg" 247) #s(triple 149 "has formal arg" 249) #s(triple 149 "has formal arg" 336) #s(triple 149 "has formal arg" 390)) #s(triple 146 "has child" 149) #s(triple 312 "has child" 149) #s(triple 346 "has child" 149))) (154 . ((#s(triple 154 "is written" -)))) (155 . ((#s(triple 155 "is defined as" 393) #s(triple 155 "has env" 146) #s(triple 155 "is named" y)) #s(triple 146 "has child" 155))) (152 . ((#s(triple 152 "is written" -)))) (153 . ((#s(triple 153 "is defined as" 392) #s(triple 153 "has env" 146) #s(triple 153 "is named" x)) #s(triple 146 "has child" 153) #s(triple 421 "has child" 153))) (158 . ((#s(triple 158 "has child" 169) #s(triple 158 "has child" 171) #s(triple 158 "is written" -)) #s(triple 146 "has child" 158))) (159 . ((#s(triple 159 "has child" 172) #s(triple 159 "has child" 171) #s(triple 159 "is written" -)) #s(triple 146 "has child" 159))) (156 . ((#s(triple 156 "is written" -)) #s(triple 157 "is defined as" 156))) (157 . ((#s(triple 157 "is defined as" 156) #s(triple 157 "has env" 146)))) (162 . ((#s(triple 162 "is written" horizontal)) #s(triple 160 "has child" 162))) (163 . ((#s(triple 163 "is written" -)))) (160 . ((#s(triple 160 "has child" 161) #s(triple 160 "has child" 162) #s(triple 160 "is written" -)) #s(triple 146 "has child" 160))) (161 . ((#s(triple 161 "is written" quote)) #s(triple 160 "has child" 161))) (166 . ((#s(triple 166 "is defined as" 165) #s(triple 166 "has env" 146) #s(triple 166 "is named" siblings)))) (167 . ((#s(triple 167 "is written" -)) #s(triple 168 "is defined as" 167))) (164 . ((#s(triple 164 "is defined as" 397) #s(triple 164 "has env" 146) #s(triple 164 "is named" row)) #s(triple 146 "has child" 164))) (165 . ((#s(triple 165 "is written" -)) #s(triple 166 "is defined as" 165))) (170 . ((#s(triple 170 "is written" -)))) (171 . ((#s(triple 171 "is defined as" 399) #s(triple 171 "has env" 146) #s(triple 171 "is named" tree)) #s(triple 158 "has child" 171) #s(triple 159 "has child" 171) #s(triple 146 "has child" 171))) (168 . ((#s(triple 168 "is defined as" 167) #s(triple 168 "has env" 146) #s(triple 168 "is named" tre)))) (169 . ((#s(triple 169 "is written" whole-tree-w)) #s(triple 158 "has child" 169))) (174 . ((#s(triple 174 "is written" -)))) (175 . ((#s(triple 175 "is written" treemap-utterance)) #s(triple 148 "has child" 175))) (172 . ((#s(triple 172 "is written" whole-tree-h)) #s(triple 159 "has child" 172))) (173 . ((#s(triple 173 "is written" -)))) (178 . ((#s(triple 178 "is written" -)))) (179 . ((#s(triple 179 "is defined as" 182) #s(triple 179 "has env" 148) #s(triple 179 "is named" n)) #s(triple 148 "has child" 179) #s(triple 197 "has child" 179) #s(triple 204 "has child" 179) #s(triple 218 "has child" 179) #s(triple 233 "has child" 179) #s(triple 242 "has child" 179) #s(triple 253 "has child" 179) #s(triple 252 "has child" 179) #s(triple 266 "has child" 179) #s(triple 273 "has child" 179) #s(triple 280 "has child" 179) #s(triple 288 "has child" 179) #s(triple 301 "has child" 179) #s(triple 386 "has child" 179) #s(triple 416 "has child" 179))) (176 . ((#s(triple 176 "is written" -)))) (177 . ((#s(triple 177 "is written" -)))) (182 . ((#s(triple 182 "is written" child) #s(triple 182 "is reified as" a182)) #s(triple 149 "has formal arg" 182) #s(triple 179 "is defined as" 182))) (183 . ((#s(triple 183 "is written" child) #s(triple 183 "is reified as" a183)) #s(triple 149 "has formal arg" 183) #s(triple 180 "is defined as" 183))) (180 . ((#s(triple 180 "is defined as" 183) #s(triple 180 "has env" 148) #s(triple 180 "is named" x)) #s(triple 148 "has child" 180) #s(triple 317 "has child" 180) #s(triple 346 "has child" 180))) (181 . ((#s(triple 181 "is defined as" 184) #s(triple 181 "has env" 148) #s(triple 181 "is named" y)) #s(triple 148 "has child" 181) #s(triple 312 "has child" 181) #s(triple 350 "has child" 181))) (186 . ((#s(triple 186 "is written" or)) #s(triple 185 "has child" 186))) (187 . ((#s(triple 187 "has child" 188) #s(triple 187 "has child" 189) #s(triple 187 "has child" 209) #s(triple 187 "is written" -)) #s(triple 185 "has child" 187))) (184 . ((#s(triple 184 "is written" child) #s(triple 184 "is reified as" a184)) #s(triple 149 "has formal arg" 184) #s(triple 181 "is defined as" 184))) (185 . ((#s(triple 185 "has child" 186) #s(triple 185 "has child" 187) #s(triple 185 "has child" 207) #s(triple 185 "is written" -)) #s(triple 148 "has child" 185))) (190 . ((#s(triple 190 "is written" or)) #s(triple 189 "has child" 190))) (191 . ((#s(triple 191 "has child" 192) #s(triple 191 "has child" 248) #s(triple 191 "has child" 194) #s(triple 191 "is written" -)) #s(triple 189 "has child" 191))) (188 . ((#s(triple 188 "is written" and)) #s(triple 187 "has child" 188))) (189 . ((#s(triple 189 "has child" 190) #s(triple 189 "has child" 191) #s(triple 189 "has child" 197) #s(triple 189 "has child" 202) #s(triple 189 "is written" -)) #s(triple 187 "has child" 189))) (195 . ((#s(triple 195 "is written" quote)) #s(triple 194 "has child" 195))) (194 . ((#s(triple 194 "has child" 195) #s(triple 194 "has child" 196) #s(triple 194 "is written" -)) #s(triple 191 "has child" 194))) (193 . ((#s(triple 193 "is written" dir)))) (192 . ((#s(triple 192 "is written" eq?)) #s(triple 191 "has child" 192))) (199 . ((#s(triple 199 "is written" n)))) (198 . ((#s(triple 198 "is written" closed?)) #s(triple 197 "has child" 198))) (197 . ((#s(triple 197 "has child" 198) #s(triple 197 "has child" 179) #s(triple 197 "has child" 201) #s(triple 197 "is written" -)) #s(triple 189 "has child" 197))) (196 . ((#s(triple 196 "is written" vertical)) #s(triple 194 "has child" 196))) (203 . ((#s(triple 203 "is written" null?)) #s(triple 202 "has child" 203))) (202 . ((#s(triple 202 "has child" 203) #s(triple 202 "has child" 204) #s(triple 202 "is written" -)) #s(triple 189 "has child" 202))) (201 . ((#s(triple 201 "is defined as" 390) #s(triple 201 "has env" 148) #s(triple 201 "is named" tree)) #s(triple 197 "has child" 201) #s(triple 233 "has child" 201) #s(triple 266 "has child" 201) #s(triple 273 "has child" 201) #s(triple 312 "has child" 201) #s(triple 346 "has child" 201))) (200 . ((#s(triple 200 "is written" child)))) (207 . ((#s(triple 207 "has child" 211) #s(triple 207 "has child" 209) #s(triple 207 "has child" 213) #s(triple 207 "is written" -)) #s(triple 185 "has child" 207))) (206 . ((#s(triple 206 "is written" -)))) (205 . ((#s(triple 205 "is written" node-args)) #s(triple 204 "has child" 205))) (204 . ((#s(triple 204 "has child" 205) #s(triple 204 "has child" 179) #s(triple 204 "is written" -)) #s(triple 202 "has child" 204))) (211 . ((#s(triple 211 "is written" /)) #s(triple 207 "has child" 211))) (210 . ((#s(triple 210 "is written" child) #s(triple 210 "is reified as" a210)) #s(triple 149 "has formal arg" 210) #s(triple 209 "is defined as" 210))) (209 . ((#s(triple 209 "is defined as" 210) #s(triple 209 "has env" 148) #s(triple 209 "is named" w)) #s(triple 187 "has child" 209) #s(triple 207 "has child" 209) #s(triple 371 "has child" 209) #s(triple 346 "has child" 209) #s(triple 148 "has child" 209))) (208 . ((#s(triple 208 "is written" -)))) (215 . ((#s(triple 215 "is written" 1)) #s(triple 213 "has child" 215))) (214 . ((#s(triple 214 "is written" +)) #s(triple 213 "has child" 214))) (213 . ((#s(triple 213 "has child" 214) #s(triple 213 "has child" 215) #s(triple 213 "has child" 216) #s(triple 213 "is written" -)) #s(triple 207 "has child" 213))) (212 . ((#s(triple 212 "is written" -)))) (219 . ((#s(triple 219 "is written" node-args)) #s(triple 218 "has child" 219))) (218 . ((#s(triple 218 "has child" 219) #s(triple 218 "has child" 179) #s(triple 218 "is written" -)) #s(triple 216 "has child" 218))) (217 . ((#s(triple 217 "is written" length)) #s(triple 216 "has child" 217))) (216 . ((#s(triple 216 "has child" 217) #s(triple 216 "has child" 218) #s(triple 216 "is written" -)) #s(triple 213 "has child" 216))) (223 . ((#s(triple 223 "has child" 224) #s(triple 223 "has child" 225) #s(triple 223 "has child" 246) #s(triple 223 "is written" -)) #s(triple 221 "has child" 223))) (222 . ((#s(triple 222 "is written" or)) #s(triple 221 "has child" 222))) (221 . ((#s(triple 221 "has child" 222) #s(triple 221 "has child" 223) #s(triple 221 "has child" 408) #s(triple 221 "is written" -)) #s(triple 148 "has child" 221))) (220 . ((#s(triple 220 "is written" -)))) (227 . ((#s(triple 227 "has child" 228) #s(triple 227 "has child" 248) #s(triple 227 "has child" 230) #s(triple 227 "is written" -)) #s(triple 225 "has child" 227))) (226 . ((#s(triple 226 "is written" or)) #s(triple 225 "has child" 226))) (225 . ((#s(triple 225 "has child" 226) #s(triple 225 "has child" 227) #s(triple 225 "has child" 233) #s(triple 225 "has child" 240) #s(triple 225 "is written" -)) #s(triple 223 "has child" 225))) (224 . ((#s(triple 224 "is written" and)) #s(triple 223 "has child" 224))) (231 . ((#s(triple 231 "is written" quote)) #s(triple 230 "has child" 231))) (230 . ((#s(triple 230 "has child" 231) #s(triple 230 "has child" 232) #s(triple 230 "is written" -)) #s(triple 227 "has child" 230))) (229 . ((#s(triple 229 "is written" dir)))) (228 . ((#s(triple 228 "is written" eq?)) #s(triple 227 "has child" 228))) (235 . ((#s(triple 235 "is written" -)))) (234 . ((#s(triple 234 "is written" closed?)) #s(triple 233 "has child" 234))) (233 . ((#s(triple 233 "has child" 234) #s(triple 233 "has child" 179) #s(triple 233 "has child" 201) #s(triple 233 "is written" -)) #s(triple 225 "has child" 233))) (232 . ((#s(triple 232 "is written" horizontal)) #s(triple 230 "has child" 232))) (239 . ((#s(triple 239 "is written" -)))) (238 . ((#s(triple 238 "is written" -)))) (237 . ((#s(triple 237 "is written" tree)))) (236 . ((#s(triple 236 "is written" -)))) (243 . ((#s(triple 243 "is written" node-args)) #s(triple 242 "has child" 243))) (242 . ((#s(triple 242 "has child" 243) #s(triple 242 "has child" 179) #s(triple 242 "is written" -)) #s(triple 240 "has child" 242))) (241 . ((#s(triple 241 "is written" null?)) #s(triple 240 "has child" 241))) (240 . ((#s(triple 240 "has child" 241) #s(triple 240 "has child" 242) #s(triple 240 "is written" -)) #s(triple 225 "has child" 240))) (247 . ((#s(triple 247 "is written" child) #s(triple 247 "is reified as" a247)) #s(triple 149 "has formal arg" 247) #s(triple 246 "is defined as" 247))) (246 . ((#s(triple 246 "is defined as" 247) #s(triple 246 "has env" 148) #s(triple 246 "is named" h)) #s(triple 223 "has child" 246) #s(triple 312 "has child" 246) #s(triple 371 "has child" 246) #s(triple 148 "has child" 246) #s(triple 408 "has child" 246))) (text . (() #s(triple 73 "is named" text) #s(triple 262 "is named" text))) (245 . ((#s(triple 245 "is written" -)))) (up . (() #s(triple 570 "is written" up))) (244 . ((#s(triple 244 "is written" -)))) (251 . ((#s(triple 251 "is written" box-width)) #s(triple 250 "has child" 251))) (250 . ((#s(triple 250 "has child" 251) #s(triple 250 "has child" 262) #s(triple 250 "is written" -)) #s(triple 148 "has child" 250))) (249 . ((#s(triple 249 "is written" child) #s(triple 249 "is reified as" a249)) #s(triple 149 "has formal arg" 249) #s(triple 248 "is defined as" 249))) (248 . ((#s(triple 248 "is defined as" 249) #s(triple 248 "has env" 148) #s(triple 248 "is named" dir)) #s(triple 191 "has child" 248) #s(triple 227 "has child" 248) #s(triple 306 "has child" 248) #s(triple 373 "has child" 248))) (255 . ((#s(triple 255 "is written" -)))) (254 . ((#s(triple 254 "is written" node-text-func)) #s(triple 253 "has child" 254))) (253 . ((#s(triple 253 "has child" 254) #s(triple 253 "has child" 179) #s(triple 253 "is written" -)) #s(triple 252 "has child" 253))) (252 . ((#s(triple 252 "has child" 253) #s(triple 252 "has child" 179) #s(triple 252 "is written" -)) #s(triple 262 "is defined as" 252))) (260 . ((#s(triple 260 "is written" -)))) (261 . ((#s(triple 261 "is written" -)))) (262 . ((#s(triple 262 "is defined as" 252) #s(triple 262 "has env" 148) #s(triple 262 "is named" text)) #s(triple 250 "has child" 262) #s(triple 257 "has child" 262))) (263 . ((#s(triple 263 "is written" -)))) (256 . ((#s(triple 256 "is written" -)))) (257 . ((#s(triple 257 "has child" 258) #s(triple 257 "has child" 262) #s(triple 257 "is written" -)) #s(triple 148 "has child" 257))) (258 . ((#s(triple 258 "is written" box-height)) #s(triple 257 "has child" 258))) (259 . ((#s(triple 259 "is written" -)))) (268 . ((#s(triple 268 "is written" -)))) (269 . ((#s(triple 269 "is written" -)))) (270 . ((#s(triple 270 "is written" if)) #s(triple 264 "has child" 270))) (271 . ((#s(triple 271 "has child" 272) #s(triple 271 "has child" 273) #s(triple 271 "has child" 278) #s(triple 271 "is written" -)) #s(triple 264 "has child" 271))) (264 . ((#s(triple 264 "has child" 270) #s(triple 264 "has child" 271) #s(triple 264 "has child" 283) #s(triple 264 "has child" 284) #s(triple 264 "is written" -)) #s(triple 265 "is defined as" 264))) (265 . ((#s(triple 265 "is defined as" 264) #s(triple 265 "has env" 148) #s(triple 265 "is named" children)) #s(triple 148 "has child" 265))) (266 . ((#s(triple 266 "has child" 267) #s(triple 266 "has child" 179) #s(triple 266 "has child" 201) #s(triple 266 "is written" -)) #s(triple 148 "has child" 266))) (267 . ((#s(triple 267 "is written" get-color)) #s(triple 266 "has child" 267))) (276 . ((#s(triple 276 "is written" -)))) (277 . ((#s(triple 277 "is written" null?)))) (278 . ((#s(triple 278 "has child" 279) #s(triple 278 "has child" 280) #s(triple 278 "is written" -)) #s(triple 271 "has child" 278))) (279 . ((#s(triple 279 "is written" null?)) #s(triple 278 "has child" 279))) (272 . ((#s(triple 272 "is written" or)) #s(triple 271 "has child" 272))) (273 . ((#s(triple 273 "has child" 274) #s(triple 273 "has child" 179) #s(triple 273 "has child" 201) #s(triple 273 "is written" -)) #s(triple 271 "has child" 273))) (274 . ((#s(triple 274 "is written" closed?)) #s(triple 273 "has child" 274))) (275 . ((#s(triple 275 "is written" -)))) (284 . ((#s(triple 284 "has child" 285) #s(triple 284 "has child" 287) #s(triple 284 "has child" 288) #s(triple 284 "has child" 291) #s(triple 284 "is written" -)) #s(triple 264 "has child" 284) #s(triple 287 "has env" 284))) (285 . ((#s(triple 285 "is written" map)) #s(triple 284 "has child" 285))) (286 . ((#s(triple 286 "has child" 305) #s(triple 286 "has child" 306) #s(triple 286 "has child" 312) #s(triple 286 "has child" 346) #s(triple 286 "is written" -)) #s(triple 287 "is defined as" 286) #s(triple 287 "is function" 286) #s(triple 324 "has env" 286) #s(triple 315 "has env" 286) #s(triple 338 "has env" 286) #s(triple 343 "has env" 286))) (287 . ((#s(triple 287 "is defined as" 286) #s(triple 287 "has env" 284) #s(triple 287 "is function" 286) #s(triple 287 "has formal arg" 316) #s(triple 287 "has formal arg" 339)) #s(triple 284 "has child" 287))) (280 . ((#s(triple 280 "has child" 281) #s(triple 280 "has child" 179) #s(triple 280 "is written" -)) #s(triple 278 "has child" 280))) (281 . ((#s(triple 281 "is written" node-args)) #s(triple 280 "has child" 281))) (282 . ((#s(triple 282 "is written" -)))) (283 . ((#s(triple 283 "is written" null)) #s(triple 264 "has child" 283))) (292 . ((#s(triple 292 "is written" map)) #s(triple 291 "has child" 292))) (293 . ((#s(triple 293 "has child" 294) #s(triple 293 "has child" 295) #s(triple 293 "has child" 296) #s(triple 293 "is written" -)) #s(triple 291 "has child" 293))) (294 . ((#s(triple 294 "is written" curry)) #s(triple 293 "has child" 294))) (295 . ((#s(triple 295 "is written" +)) #s(triple 293 "has child" 295))) (288 . ((#s(triple 288 "has child" 289) #s(triple 288 "has child" 179) #s(triple 288 "is written" -)) #s(triple 284 "has child" 288))) (289 . ((#s(triple 289 "is written" node-args)) #s(triple 288 "has child" 289))) (290 . ((#s(triple 290 "is written" -)))) (291 . ((#s(triple 291 "has child" 292) #s(triple 291 "has child" 293) #s(triple 291 "has child" 297) #s(triple 291 "is written" -)) #s(triple 284 "has child" 291))) (300 . ((#s(triple 300 "is written" length)) #s(triple 299 "has child" 300))) (301 . ((#s(triple 301 "has child" 302) #s(triple 301 "has child" 179) #s(triple 301 "is written" -)) #s(triple 299 "has child" 301))) (302 . ((#s(triple 302 "is written" node-args)) #s(triple 301 "has child" 302))) (303 . ((#s(triple 303 "is written" -)))) (296 . ((#s(triple 296 "is written" 1)) #s(triple 293 "has child" 296))) (297 . ((#s(triple 297 "has child" 298) #s(triple 297 "has child" 299) #s(triple 297 "has child" 304) #s(triple 297 "is written" -)) #s(triple 291 "has child" 297))) (298 . ((#s(triple 298 "is written" build-list)) #s(triple 297 "has child" 298))) (299 . ((#s(triple 299 "has child" 300) #s(triple 299 "has child" 301) #s(triple 299 "is written" -)) #s(triple 297 "has child" 299))) (308 . ((#s(triple 308 "is written" -)))) (309 . ((#s(triple 309 "has child" 310) #s(triple 309 "has child" 311) #s(triple 309 "is written" -)) #s(triple 306 "has child" 309))) (310 . ((#s(triple 310 "is written" quote)) #s(triple 309 "has child" 310))) (311 . ((#s(triple 311 "is written" horizontal)) #s(triple 309 "has child" 311))) (304 . ((#s(triple 304 "is written" identity)) #s(triple 297 "has child" 304))) (305 . ((#s(triple 305 "is written" if)) #s(triple 286 "has child" 305))) (306 . ((#s(triple 306 "has child" 307) #s(triple 306 "has child" 248) #s(triple 306 "has child" 309) #s(triple 306 "is written" -)) #s(triple 286 "has child" 306))) (307 . ((#s(triple 307 "is written" eq?)) #s(triple 306 "has child" 307))) (316 . ((#s(triple 316 "is written" arger) #s(triple 316 "is reified as" a316)) #s(triple 287 "has formal arg" 316) #s(triple 315 "is defined as" 316))) (317 . ((#s(triple 317 "has child" 318) #s(triple 317 "has child" 180) #s(triple 317 "has child" 320) #s(triple 317 "is written" -)) #s(triple 312 "has child" 317))) (318 . ((#s(triple 318 "is written" +)) #s(triple 317 "has child" 318))) (319 . ((#s(triple 319 "is written" -)))) (312 . ((#s(triple 312 "has child" 149) #s(triple 312 "has child" 315) #s(triple 312 "has child" 317) #s(triple 312 "has child" 181) #s(triple 312 "has child" 324) #s(triple 312 "has child" 246) #s(triple 312 "has child" 328) #s(triple 312 "has child" 331) #s(triple 312 "has child" 201) #s(triple 312 "is written" -)) #s(triple 286 "has child" 312))) (313 . ((#s(triple 313 "is written" node-utterance)))) (314 . ((#s(triple 314 "is written" -)))) (315 . ((#s(triple 315 "is defined as" 316) #s(triple 315 "has env" 286) #s(triple 315 "is named" arg)) #s(triple 346 "has child" 315) #s(triple 312 "has child" 315))) (325 . ((#s(triple 325 "is written" -)))) (324 . ((#s(triple 324 "is defined as" 323) #s(triple 324 "has env" 286) #s(triple 324 "is named" child-wh)) #s(triple 312 "has child" 324) #s(triple 353 "has child" 324) #s(triple 346 "has child" 324) #s(triple 427 "has child" 324))) (327 . ((#s(triple 327 "is written" -)))) (326 . ((#s(triple 326 "is written" -)))) (321 . ((#s(triple 321 "is written" *)) #s(triple 320 "has child" 321))) (320 . ((#s(triple 320 "has child" 321) #s(triple 320 "has child" 338) #s(triple 320 "has child" 324) #s(triple 320 "is written" -)) #s(triple 317 "has child" 320))) (323 . ((#s(triple 323 "has child" 370) #s(triple 323 "has child" 371) #s(triple 323 "has child" 343) #s(triple 323 "is written" -)) #s(triple 324 "is defined as" 323))) (322 . ((#s(triple 322 "is written" -)))) (333 . ((#s(triple 333 "is written" 1)) #s(triple 331 "has child" 333))) (332 . ((#s(triple 332 "is written" +)) #s(triple 331 "has child" 332))) (335 . ((#s(triple 335 "is defined as" 336) #s(triple 335 "has env" 148) #s(triple 335 "is named" row)) #s(triple 331 "has child" 335) #s(triple 360 "has child" 335))) (334 . ((#s(triple 334 "is written" -)))) (329 . ((#s(triple 329 "is written" quote)) #s(triple 328 "has child" 329))) (328 . ((#s(triple 328 "has child" 329) #s(triple 328 "has child" 330) #s(triple 328 "is written" -)) #s(triple 312 "has child" 328))) (331 . ((#s(triple 331 "has child" 332) #s(triple 331 "has child" 333) #s(triple 331 "has child" 335) #s(triple 331 "is written" -)) #s(triple 312 "has child" 331))) (330 . ((#s(triple 330 "is written" vertical)) #s(triple 328 "has child" 330))) (341 . ((#s(triple 341 "is written" -)) #s(triple 340 "has child" 341))) (340 . ((#s(triple 340 "has child" 341) #s(triple 340 "has child" 343) #s(triple 340 "has child" 344) #s(triple 340 "is written" -)))) (343 . ((#s(triple 343 "is defined as" 342) #s(triple 343 "has env" 286) #s(triple 343 "is named" num-args)) #s(triple 340 "has child" 343) #s(triple 365 "has child" 343) #s(triple 323 "has child" 343))) (342 . ((#s(triple 342 "has child" 382) #s(triple 342 "has child" 383) #s(triple 342 "has child" 384) #s(triple 342 "is written" -)) #s(triple 343 "is defined as" 342))) (337 . ((#s(triple 337 "is written" -)))) (336 . ((#s(triple 336 "is written" child) #s(triple 336 "is reified as" a336)) #s(triple 149 "has formal arg" 336) #s(triple 335 "is defined as" 336))) (339 . ((#s(triple 339 "is written" arger) #s(triple 339 "is reified as" a339)) #s(triple 287 "has formal arg" 339) #s(triple 338 "is defined as" 339))) (338 . ((#s(triple 338 "is defined as" 339) #s(triple 338 "has env" 286) #s(triple 338 "is named" inner-n)) #s(triple 320 "has child" 338) #s(triple 353 "has child" 338) #s(triple 424 "has child" 338))) (349 . ((#s(triple 349 "is written" -)))) (348 . ((#s(triple 348 "is written" -)))) (351 . ((#s(triple 351 "is written" +)) #s(triple 350 "has child" 351))) (350 . ((#s(triple 350 "has child" 351) #s(triple 350 "has child" 181) #s(triple 350 "has child" 353) #s(triple 350 "is written" -)) #s(triple 346 "has child" 350))) (345 . ((#s(triple 345 "is written" -)))) (344 . ((#s(triple 344 "is written" 1)) #s(triple 340 "has child" 344))) (347 . ((#s(triple 347 "is written" -)))) (346 . ((#s(triple 346 "has child" 149) #s(triple 346 "has child" 315) #s(triple 346 "has child" 180) #s(triple 346 "has child" 350) #s(triple 346 "has child" 209) #s(triple 346 "has child" 324) #s(triple 346 "has child" 357) #s(triple 346 "has child" 360) #s(triple 346 "has child" 201) #s(triple 346 "is written" -)) #s(triple 286 "has child" 346))) (357 . ((#s(triple 357 "has child" 358) #s(triple 357 "has child" 359) #s(triple 357 "is written" -)) #s(triple 346 "has child" 357))) (356 . ((#s(triple 356 "is written" -)))) (359 . ((#s(triple 359 "is written" horizontal)) #s(triple 357 "has child" 359))) (358 . ((#s(triple 358 "is written" quote)) #s(triple 357 "has child" 358))) (353 . ((#s(triple 353 "has child" 354) #s(triple 353 "has child" 338) #s(triple 353 "has child" 324) #s(triple 353 "is written" -)) #s(triple 350 "has child" 353))) (352 . ((#s(triple 352 "is written" -)))) (355 . ((#s(triple 355 "is written" -)))) (354 . ((#s(triple 354 "is written" *)) #s(triple 353 "has child" 354))) (365 . ((#s(triple 365 "has child" 366) #s(triple 365 "has child" 343) #s(triple 365 "has child" 368) #s(triple 365 "is written" -)))) (364 . ((#s(triple 364 "is written" -)))) (367 . ((#s(triple 367 "is written" -)))) (366 . ((#s(triple 366 "is written" -)) #s(triple 365 "has child" 366))) (361 . ((#s(triple 361 "is written" +)) #s(triple 360 "has child" 361))) (360 . ((#s(triple 360 "has child" 361) #s(triple 360 "has child" 362) #s(triple 360 "has child" 335) #s(triple 360 "is written" -)) #s(triple 346 "has child" 360))) (363 . ((#s(triple 363 "is written" -)))) (362 . ((#s(triple 362 "is written" 1)) #s(triple 360 "has child" 362))) (373 . ((#s(triple 373 "has child" 374) #s(triple 373 "has child" 248) #s(triple 373 "has child" 376) #s(triple 373 "is written" -)) #s(triple 371 "has child" 373))) (372 . ((#s(triple 372 "is written" if)) #s(triple 371 "has child" 372))) (375 . ((#s(triple 375 "is written" -)))) (374 . ((#s(triple 374 "is written" eq?)) #s(triple 373 "has child" 374))) (369 . ((#s(triple 369 "is written" -)))) (368 . ((#s(triple 368 "is written" 1)) #s(triple 365 "has child" 368))) (371 . ((#s(triple 371 "has child" 372) #s(triple 371 "has child" 373) #s(triple 371 "has child" 209) #s(triple 371 "has child" 246) #s(triple 371 "is written" -)) #s(triple 323 "has child" 371))) (370 . ((#s(triple 370 "is written" /)) #s(triple 323 "has child" 370))) (381 . ((#s(triple 381 "is written" -)))) (380 . ((#s(triple 380 "is written" -)))) (383 . ((#s(triple 383 "is written" 1)) #s(triple 342 "has child" 383))) (382 . ((#s(triple 382 "is written" +)) #s(triple 342 "has child" 382))) (377 . ((#s(triple 377 "is written" quote)) #s(triple 376 "has child" 377))) (376 . ((#s(triple 376 "has child" 377) #s(triple 376 "has child" 378) #s(triple 376 "is written" -)) #s(triple 373 "has child" 376))) (379 . ((#s(triple 379 "is written" -)))) (378 . ((#s(triple 378 "is written" horizontal)) #s(triple 376 "has child" 378))) (390 . ((#s(triple 390 "is written" child) #s(triple 390 "is reified as" a390)) #s(triple 149 "has formal arg" 390) #s(triple 201 "is defined as" 390))) (391 . ((#s(triple 391 "is written" arger) #s(triple 391 "is reified as" a391)) #s(triple 147 "has formal arg" 391) #s(triple 151 "is defined as" 391))) (388 . ((#s(triple 388 "is written" -)))) (389 . ((#s(triple 389 "is written" -)))) (386 . ((#s(triple 386 "has child" 387) #s(triple 386 "has child" 179) #s(triple 386 "is written" -)) #s(triple 384 "has child" 386))) (387 . ((#s(triple 387 "is written" node-args)) #s(triple 386 "has child" 387))) (384 . ((#s(triple 384 "has child" 385) #s(triple 384 "has child" 386) #s(triple 384 "is written" -)) #s(triple 342 "has child" 384))) (385 . ((#s(triple 385 "is written" length)) #s(triple 384 "has child" 385))) (398 . ((#s(triple 398 "is written" arger) #s(triple 398 "is reified as" a398)) #s(triple 147 "has formal arg" 398))) (399 . ((#s(triple 399 "is written" arger) #s(triple 399 "is reified as" a399)) #s(triple 147 "has formal arg" 399) #s(triple 171 "is defined as" 399))) (396 . ((#s(triple 396 "is written" arger) #s(triple 396 "is reified as" a396)) #s(triple 147 "has formal arg" 396))) (397 . ((#s(triple 397 "is written" arger) #s(triple 397 "is reified as" a397)) #s(triple 147 "has formal arg" 397) #s(triple 164 "is defined as" 397))) (394 . ((#s(triple 394 "is written" -)))) (395 . ((#s(triple 395 "is written" -)))) (392 . ((#s(triple 392 "is written" arger) #s(triple 392 "is reified as" a392)) #s(triple 147 "has formal arg" 392) #s(triple 153 "is defined as" 392))) (393 . ((#s(triple 393 "is written" arger) #s(triple 393 "is reified as" a393)) #s(triple 147 "has formal arg" 393) #s(triple 155 "is defined as" 393))) (406 . ((#s(triple 406 "is written" -)))) (407 . ((#s(triple 407 "is written" -)))) (404 . ((#s(triple 404 "is written" -)))) (405 . ((#s(triple 405 "is written" -)))) (402 . ((#s(triple 402 "is written" treemap-utterance-total-height)) #s(triple 36 "has child" 402))) (403 . ((#s(triple 403 "is written" a143)) #s(triple 36 "has child" 403))) (400 . ((#s(triple 400 "is written" treemap-utterance-total-width)) #s(triple 35 "has child" 400))) (401 . ((#s(triple 401 "is written" a143)) #s(triple 35 "has child" 401))) (414 . ((#s(triple 414 "has child" 415) #s(triple 414 "has child" 416) #s(triple 414 "is written" -)) #s(triple 411 "has child" 414))) (415 . ((#s(triple 415 "is written" length)) #s(triple 414 "has child" 415))) (412 . ((#s(triple 412 "is written" +)) #s(triple 411 "has child" 412))) (413 . ((#s(triple 413 "is written" 1)) #s(triple 411 "has child" 413))) (410 . ((#s(triple 410 "is written" -)))) (411 . ((#s(triple 411 "has child" 412) #s(triple 411 "has child" 413) #s(triple 411 "has child" 414) #s(triple 411 "is written" -)) #s(triple 408 "has child" 411))) (408 . ((#s(triple 408 "has child" 409) #s(triple 408 "has child" 246) #s(triple 408 "has child" 411) #s(triple 408 "is written" -)) #s(triple 221 "has child" 408))) (409 . ((#s(triple 409 "is written" /)) #s(triple 408 "has child" 409))) (422 . ((#s(triple 422 "is written" displayln)) #s(triple 421 "has child" 422))) (423 . ((#s(triple 423 "is written" -)))) (420 . ((#s(triple 420 "is written" begin)))) (421 . ((#s(triple 421 "has child" 422) #s(triple 421 "has child" 153) #s(triple 421 "is written" -)))) (418 . ((#s(triple 418 "is written" -)))) (419 . ((#s(triple 419 "is written" -)))) (416 . ((#s(triple 416 "has child" 417) #s(triple 416 "has child" 179) #s(triple 416 "is written" -)) #s(triple 414 "has child" 416))) (417 . ((#s(triple 417 "is written" node-args)) #s(triple 416 "has child" 417))) (430 . ((#s(triple 430 "has child" 431) #s(triple 430 "has child" 432) #s(triple 430 "is written" -)))) (431 . ((#s(triple 431 "is written" displayln)) #s(triple 430 "has child" 431))) (428 . ((#s(triple 428 "is written" displayln)) #s(triple 427 "has child" 428))) (429 . ((#s(triple 429 "is written" -)))) (426 . ((#s(triple 426 "is written" -)))) (427 . ((#s(triple 427 "has child" 428) #s(triple 427 "has child" 324) #s(triple 427 "is written" -)))) (424 . ((#s(triple 424 "has child" 425) #s(triple 424 "has child" 338) #s(triple 424 "is written" -)))) (425 . ((#s(triple 425 "is written" displayln)) #s(triple 424 "has child" 425))) (438 . ((#s(triple 438 "has child" 440) #s(triple 438 "has child" 441) #s(triple 438 "has child" 450) #s(triple 438 "has child" 503) #s(triple 438 "is written" -)) #s(triple 439 "is defined as" 438) #s(triple 439 "is function" 438) #s(triple 450 "has env" 438) #s(triple 467 "has env" 438) #s(triple 484 "has env" 438))) (439 . ((#s(triple 439 "is defined as" 438) #s(triple 439 "has env" 435) #s(triple 439 "is function" 438) #s(triple 439 "is named" find-utterance) #s(triple 439 "has formal arg" 451)) #s(triple 552 "has child" 439) #s(triple 639 "has child" 439))) (436 . ((#s(triple 436 "is defined as" 435) #s(triple 436 "has env" 3) #s(triple 436 "is function" 435) #s(triple 436 "has formal arg" 455) #s(triple 436 "has formal arg" 487) #s(triple 436 "has formal arg" 488) #s(triple 436 "has formal arg" 637)) #s(triple 3 "has child" 436))) (437 . ((#s(triple 437 "is written" or)) #s(triple 435 "has child" 437))) (434 . ((#s(triple 434 "is written" -)))) (435 . ((#s(triple 435 "has child" 437) #s(triple 435 "has child" 639) #s(triple 435 "is written" -) #s(triple 435 "has child" 453) #s(triple 435 "has child" 636)) #s(triple 436 "is defined as" 435) #s(triple 436 "is function" 435) #s(triple 439 "has env" 435) #s(triple 453 "has env" 435) #s(triple 636 "has env" 435))) (432 . ((#s(triple 432 "is written" |"t"|)) #s(triple 430 "has child" 432))) (433 . ((#s(triple 433 "is written" -)))) (446 . ((#s(triple 446 "is written" =)) #s(triple 445 "has child" 446))) (447 . ((#s(triple 447 "has child" 448) #s(triple 447 "has child" 450) #s(triple 447 "is written" -)) #s(triple 445 "has child" 447))) (444 . ((#s(triple 444 "is written" and)) #s(triple 443 "has child" 444))) (445 . ((#s(triple 445 "has child" 446) #s(triple 445 "has child" 447) #s(triple 445 "has child" 456) #s(triple 445 "is written" -)) #s(triple 443 "has child" 445))) (442 . ((#s(triple 442 "is written" or)) #s(triple 441 "has child" 442))) (443 . ((#s(triple 443 "has child" 444) #s(triple 443 "has child" 445) #s(triple 443 "has child" 459) #s(triple 443 "is written" -)) #s(triple 441 "has child" 443))) (440 . ((#s(triple 440 "is written" if)) #s(triple 438 "has child" 440))) (441 . ((#s(triple 441 "has child" 442) #s(triple 441 "has child" 443) #s(triple 441 "has child" 471) #s(triple 441 "has child" 497) #s(triple 441 "is written" -)) #s(triple 438 "has child" 441))) (455 . ((#s(triple 455 "is written" arger) #s(triple 455 "is reified as" a455)) #s(triple 436 "has formal arg" 455) #s(triple 453 "is defined as" 455))) (453 . ((#s(triple 453 "is defined as" 455) #s(triple 453 "has env" 435) #s(triple 453 "is named" root)) #s(triple 435 "has child" 453) #s(triple 639 "has child" 453))) (451 . ((#s(triple 451 "is written" child) #s(triple 451 "is reified as" a451)) #s(triple 439 "has formal arg" 451) #s(triple 450 "is defined as" 451))) (450 . ((#s(triple 450 "is defined as" 451) #s(triple 450 "has env" 438) #s(triple 450 "is named" root)) #s(triple 447 "has child" 450) #s(triple 456 "has child" 450) #s(triple 464 "has child" 450) #s(triple 468 "has child" 450) #s(triple 475 "has child" 450) #s(triple 478 "has child" 450) #s(triple 491 "has child" 450) #s(triple 494 "has child" 450) #s(triple 499 "has child" 450) #s(triple 438 "has child" 450) #s(triple 507 "has child" 450))) (449 . ((#s(triple 449 "is written" -)))) (448 . ((#s(triple 448 "is written" utterance-w)) #s(triple 447 "has child" 448))) (463 . ((#s(triple 463 "is written" +)) #s(triple 462 "has child" 463))) (462 . ((#s(triple 462 "has child" 463) #s(triple 462 "has child" 464) #s(triple 462 "has child" 468) #s(triple 462 "is written" -)) #s(triple 459 "has child" 462))) (461 . ((#s(triple 461 "is written" -)))) (460 . ((#s(triple 460 "is written" <)) #s(triple 459 "has child" 460))) (459 . ((#s(triple 459 "has child" 460) #s(triple 459 "has child" 467) #s(triple 459 "has child" 462) #s(triple 459 "is written" -)) #s(triple 443 "has child" 459))) (458 . ((#s(triple 458 "is written" -)))) (457 . ((#s(triple 457 "is written" treemap-utterance-total-width)) #s(triple 456 "has child" 457))) (456 . ((#s(triple 456 "has child" 457) #s(triple 456 "has child" 450) #s(triple 456 "is written" -)) #s(triple 445 "has child" 456))) (471 . ((#s(triple 471 "has child" 472) #s(triple 471 "has child" 473) #s(triple 471 "has child" 481) #s(triple 471 "is written" -)) #s(triple 441 "has child" 471))) (470 . ((#s(triple 470 "is written" -)))) (469 . ((#s(triple 469 "is written" utterance-h)) #s(triple 468 "has child" 469))) (468 . ((#s(triple 468 "has child" 469) #s(triple 468 "has child" 450) #s(triple 468 "is written" -)) #s(triple 462 "has child" 468))) (467 . ((#s(triple 467 "is defined as" 488) #s(triple 467 "has env" 438) #s(triple 467 "is named" y)) #s(triple 459 "has child" 467) #s(triple 515 "has child" 467) #s(triple 523 "has child" 467))) (466 . ((#s(triple 466 "is written" -)))) (465 . ((#s(triple 465 "is written" utterance-y)) #s(triple 464 "has child" 465))) (464 . ((#s(triple 464 "has child" 465) #s(triple 464 "has child" 450) #s(triple 464 "is written" -)) #s(triple 462 "has child" 464))) (479 . ((#s(triple 479 "is written" treemap-utterance-total-height)) #s(triple 478 "has child" 479))) (478 . ((#s(triple 478 "has child" 479) #s(triple 478 "has child" 450) #s(triple 478 "is written" -)) #s(triple 473 "has child" 478))) (477 . ((#s(triple 477 "is written" -)))) (476 . ((#s(triple 476 "is written" utterance-h)) #s(triple 475 "has child" 476))) (475 . ((#s(triple 475 "has child" 476) #s(triple 475 "has child" 450) #s(triple 475 "is written" -)) #s(triple 473 "has child" 475))) (474 . ((#s(triple 474 "is written" =)) #s(triple 473 "has child" 474))) (473 . ((#s(triple 473 "has child" 474) #s(triple 473 "has child" 475) #s(triple 473 "has child" 478) #s(triple 473 "is written" -)) #s(triple 471 "has child" 473))) (472 . ((#s(triple 472 "is written" and)) #s(triple 471 "has child" 472))) (487 . ((#s(triple 487 "is written" arger) #s(triple 487 "is reified as" a487)) #s(triple 436 "has formal arg" 487) #s(triple 484 "is defined as" 487))) (484 . ((#s(triple 484 "is defined as" 487) #s(triple 484 "has env" 438) #s(triple 484 "is named" x)) #s(triple 481 "has child" 484) #s(triple 535 "has child" 484) #s(triple 541 "has child" 484))) (483 . ((#s(triple 483 "is written" -)))) (482 . ((#s(triple 482 "is written" <)) #s(triple 481 "has child" 482))) (481 . ((#s(triple 481 "has child" 482) #s(triple 481 "has child" 484) #s(triple 481 "has child" 489) #s(triple 481 "is written" -)) #s(triple 471 "has child" 481))) (480 . ((#s(triple 480 "is written" -)))) (495 . ((#s(triple 495 "is written" utterance-w)) #s(triple 494 "has child" 495))) (494 . ((#s(triple 494 "has child" 495) #s(triple 494 "has child" 450) #s(triple 494 "is written" -)) #s(triple 489 "has child" 494))) (493 . ((#s(triple 493 "is written" -)))) (492 . ((#s(triple 492 "is written" utterance-x)) #s(triple 491 "has child" 492))) (491 . ((#s(triple 491 "has child" 492) #s(triple 491 "has child" 450) #s(triple 491 "is written" -)) #s(triple 489 "has child" 491))) (490 . ((#s(triple 490 "is written" +)) #s(triple 489 "has child" 490))) (489 . ((#s(triple 489 "has child" 490) #s(triple 489 "has child" 491) #s(triple 489 "has child" 494) #s(triple 489 "is written" -)) #s(triple 481 "has child" 489))) (488 . ((#s(triple 488 "is written" arger) #s(triple 488 "is reified as" a488)) #s(triple 436 "has formal arg" 488) #s(triple 467 "is defined as" 488))) (503 . ((#s(triple 503 "has child" 504) #s(triple 503 "has child" 506) #s(triple 503 "has child" 507) #s(triple 503 "is written" -)) #s(triple 506 "has env" 503) #s(triple 438 "has child" 503))) (502 . ((#s(triple 502 "is written" -)))) (501 . ((#s(triple 501 "is written" -)))) (500 . ((#s(triple 500 "is written" utterance-args)) #s(triple 499 "has child" 500))) (499 . ((#s(triple 499 "has child" 500) #s(triple 499 "has child" 450) #s(triple 499 "is written" -)) #s(triple 497 "has child" 499))) (498 . ((#s(triple 498 "is written" null?)) #s(triple 497 "has child" 498))) (497 . ((#s(triple 497 "has child" 498) #s(triple 497 "has child" 499) #s(triple 497 "is written" -)) #s(triple 441 "has child" 497))) (496 . ((#s(triple 496 "is written" -)))) (511 . ((#s(triple 511 "has child" 514) #s(triple 511 "has child" 515) #s(triple 511 "has child" 523) #s(triple 511 "has child" 535) #s(triple 511 "has child" 541) #s(triple 511 "is written" -)) #s(triple 505 "has child" 511))) (510 . ((#s(triple 510 "is written" if)) #s(triple 505 "has child" 510))) (509 . ((#s(triple 509 "is written" -)))) (508 . ((#s(triple 508 "is written" utterance-args)) #s(triple 507 "has child" 508))) (507 . ((#s(triple 507 "has child" 508) #s(triple 507 "has child" 450) #s(triple 507 "is written" -)) #s(triple 503 "has child" 507))) (506 . ((#s(triple 506 "is defined as" 505) #s(triple 506 "has env" 503) #s(triple 506 "is function" 505) #s(triple 506 "has formal arg" 522)) #s(triple 503 "has child" 506))) (505 . ((#s(triple 505 "has child" 510) #s(triple 505 "has child" 511) #s(triple 505 "has child" 552) #s(triple 505 "has child" 555) #s(triple 505 "is written" -)) #s(triple 506 "is defined as" 505) #s(triple 506 "is function" 505) #s(triple 521 "has env" 505))) (504 . ((#s(triple 504 "is written" ormap)) #s(triple 503 "has child" 504))) (520 . ((#s(triple 520 "is written" -)))) (521 . ((#s(triple 521 "is defined as" 522) #s(triple 521 "has env" 505) #s(triple 521 "is named" child)) #s(triple 518 "has child" 521) #s(triple 532 "has child" 521) #s(triple 526 "has child" 521) #s(triple 538 "has child" 521) #s(triple 546 "has child" 521) #s(triple 549 "has child" 521) #s(triple 552 "has child" 521))) (522 . ((#s(triple 522 "is written" arger) #s(triple 522 "is reified as" a522)) #s(triple 506 "has formal arg" 522) #s(triple 521 "is defined as" 522))) (523 . ((#s(triple 523 "has child" 524) #s(triple 523 "has child" 467) #s(triple 523 "has child" 529) #s(triple 523 "is written" -)) #s(triple 511 "has child" 523))) (524 . ((#s(triple 524 "is written" <)) #s(triple 523 "has child" 524))) (525 . ((#s(triple 525 "is written" -)))) (526 . ((#s(triple 526 "has child" 527) #s(triple 526 "has child" 521) #s(triple 526 "is written" -)) #s(triple 529 "has child" 526))) (527 . ((#s(triple 527 "is written" utterance-y)) #s(triple 526 "has child" 527))) (512 . ((#s(triple 512 "is written" -)))) (513 . ((#s(triple 513 "is written" -)))) (514 . ((#s(triple 514 "is written" and)) #s(triple 511 "has child" 514))) (515 . ((#s(triple 515 "has child" 516) #s(triple 515 "has child" 467) #s(triple 515 "has child" 518) #s(triple 515 "is written" -)) #s(triple 511 "has child" 515))) (516 . ((#s(triple 516 "is written" >=)) #s(triple 515 "has child" 516))) (517 . ((#s(triple 517 "is written" -)))) (518 . ((#s(triple 518 "has child" 519) #s(triple 518 "has child" 521) #s(triple 518 "is written" -)) #s(triple 515 "has child" 518))) (519 . ((#s(triple 519 "is written" utterance-y)) #s(triple 518 "has child" 519))) (536 . ((#s(triple 536 "is written" >=)) #s(triple 535 "has child" 536))) (537 . ((#s(triple 537 "is written" -)))) (538 . ((#s(triple 538 "has child" 539) #s(triple 538 "has child" 521) #s(triple 538 "is written" -)) #s(triple 535 "has child" 538))) (539 . ((#s(triple 539 "is written" utterance-x)) #s(triple 538 "has child" 539))) (540 . ((#s(triple 540 "is written" -)))) (541 . ((#s(triple 541 "has child" 542) #s(triple 541 "has child" 484) #s(triple 541 "has child" 544) #s(triple 541 "is written" -)) #s(triple 511 "has child" 541))) (542 . ((#s(triple 542 "is written" <)) #s(triple 541 "has child" 542))) (543 . ((#s(triple 543 "is written" -)))) (528 . ((#s(triple 528 "is written" child)))) (529 . ((#s(triple 529 "has child" 530) #s(triple 529 "has child" 526) #s(triple 529 "has child" 532) #s(triple 529 "is written" -)) #s(triple 523 "has child" 529))) (530 . ((#s(triple 530 "is written" +)) #s(triple 529 "has child" 530))) (532 . ((#s(triple 532 "has child" 533) #s(triple 532 "has child" 521) #s(triple 532 "is written" -)) #s(triple 529 "has child" 532))) (533 . ((#s(triple 533 "is written" treemap-utterance-total-height)) #s(triple 532 "has child" 533))) (534 . ((#s(triple 534 "is written" -)))) (535 . ((#s(triple 535 "has child" 536) #s(triple 535 "has child" 484) #s(triple 535 "has child" 538) #s(triple 535 "is written" -)) #s(triple 511 "has child" 535))) (552 . ((#s(triple 552 "has child" 439) #s(triple 552 "has child" 521) #s(triple 552 "is written" -)) #s(triple 505 "has child" 552))) (553 . ((#s(triple 553 "is written" -)))) (554 . ((#s(triple 554 "is written" -)))) (555 . ((#s(triple 555 "is written" |#f|)) #s(triple 505 "has child" 555))) (556 . ((#s(triple 556 "is written" -)))) (559 . ((#s(triple 559 "has child" 561) #s(triple 559 "has child" 562) #s(triple 559 "has child" 582) #s(triple 559 "has child" 598) #s(triple 559 "has child" 615) #s(triple 559 "is written" -)) #s(triple 560 "is defined as" 559) #s(triple 560 "is function" 559) #s(triple 566 "has env" 559) #s(triple 642 "has env" 559))) (544 . ((#s(triple 544 "has child" 545) #s(triple 544 "has child" 546) #s(triple 544 "has child" 549) #s(triple 544 "is written" -)) #s(triple 541 "has child" 544))) (545 . ((#s(triple 545 "is written" +)) #s(triple 544 "has child" 545))) (546 . ((#s(triple 546 "has child" 547) #s(triple 546 "has child" 521) #s(triple 546 "is written" -)) #s(triple 544 "has child" 546))) (547 . ((#s(triple 547 "is written" utterance-x)) #s(triple 546 "has child" 547))) (548 . ((#s(triple 548 "is written" -)))) (549 . ((#s(triple 549 "has child" 550) #s(triple 549 "has child" 521) #s(triple 549 "is written" -)) #s(triple 544 "has child" 549))) (550 . ((#s(triple 550 "is written" treemap-utterance-total-width)) #s(triple 549 "has child" 550))) (551 . ((#s(triple 551 "is written" -)))) (568 . ((#s(triple 568 "has child" 569) #s(triple 568 "has child" 570) #s(triple 568 "is written" -)) #s(triple 563 "has child" 568))) (569 . ((#s(triple 569 "is written" quote)) #s(triple 568 "has child" 569))) (570 . ((#s(triple 570 "is written" up)) #s(triple 568 "has child" 570))) (571 . ((#s(triple 571 "has child" 572) #s(triple 571 "has child" 573) #s(triple 571 "has child" 574) #s(triple 571 "is written" -)) #s(triple 562 "has child" 571))) (572 . ((#s(triple 572 "is written" set-whole-tree-zoom!)) #s(triple 571 "has child" 572))) (573 . ((#s(triple 573 "is written" Selected-tree)) #s(triple 571 "has child" 573))) (574 . ((#s(triple 574 "has child" 575) #s(triple 574 "has child" 576) #s(triple 574 "has child" 579) #s(triple 574 "is written" -)) #s(triple 571 "has child" 574))) (575 . ((#s(triple 575 "is written" *)) #s(triple 574 "has child" 575))) (560 . ((#s(triple 560 "is defined as" 559) #s(triple 560 "has env" 3) #s(triple 560 "is function" 559) #s(triple 560 "has formal arg" 567) #s(triple 560 "is named" ---) #s(triple 560 "has formal arg" 643)) #s(triple 3 "has child" 560))) (561 . ((#s(triple 561 "is written" cond)) #s(triple 559 "has child" 561))) (562 . ((#s(triple 562 "has child" 563) #s(triple 562 "has child" 571) #s(triple 562 "is written" -)) #s(triple 559 "has child" 562))) (563 . ((#s(triple 563 "has child" 564) #s(triple 563 "has child" 566) #s(triple 563 "has child" 568) #s(triple 563 "is written" -)) #s(triple 562 "has child" 563))) (564 . ((#s(triple 564 "is written" eq?)) #s(triple 563 "has child" 564))) (565 . ((#s(triple 565 "is written" -)))) (566 . ((#s(triple 566 "is defined as" 567) #s(triple 566 "has env" 559) #s(triple 566 "is named" dir)) #s(triple 563 "has child" 566) #s(triple 583 "has child" 566) #s(triple 599 "has child" 566) #s(triple 618 "has child" 566))) (567 . ((#s(triple 567 "is written" arger) #s(triple 567 "is reified as" a567)) #s(triple 560 "has formal arg" 567) #s(triple 566 "is defined as" 567))) (585 . ((#s(triple 585 "is written" -)))) (584 . ((#s(triple 584 "is written" eq?)) #s(triple 583 "has child" 584))) (587 . ((#s(triple 587 "is written" quote)) #s(triple 586 "has child" 587))) (586 . ((#s(triple 586 "has child" 587) #s(triple 586 "has child" 588) #s(triple 586 "is written" -)) #s(triple 583 "has child" 586))) (589 . ((#s(triple 589 "has child" 590) #s(triple 589 "has child" 591) #s(triple 589 "has child" 592) #s(triple 589 "is written" -)) #s(triple 582 "has child" 589))) (588 . ((#s(triple 588 "is written" down)) #s(triple 586 "has child" 588))) (591 . ((#s(triple 591 "is written" Selected-tree)) #s(triple 589 "has child" 591))) (590 . ((#s(triple 590 "is written" set-whole-tree-zoom!)) #s(triple 589 "has child" 590))) (577 . ((#s(triple 577 "is written" /)) #s(triple 576 "has child" 577))) (576 . ((#s(triple 576 "has child" 577) #s(triple 576 "has child" 578) #s(triple 576 "is written" -)) #s(triple 574 "has child" 576))) (579 . ((#s(triple 579 "has child" 580) #s(triple 579 "has child" 581) #s(triple 579 "is written" -)) #s(triple 574 "has child" 579))) (578 . ((#s(triple 578 "is written" 1.2)) #s(triple 576 "has child" 578))) (581 . ((#s(triple 581 "is written" Selected-tree)) #s(triple 579 "has child" 581))) (580 . ((#s(triple 580 "is written" whole-tree-zoom)) #s(triple 579 "has child" 580))) (583 . ((#s(triple 583 "has child" 584) #s(triple 583 "has child" 566) #s(triple 583 "has child" 586) #s(triple 583 "is written" -)) #s(triple 582 "has child" 583))) (582 . ((#s(triple 582 "has child" 583) #s(triple 582 "has child" 589) #s(triple 582 "is written" -)) #s(triple 559 "has child" 582))) (601 . ((#s(triple 601 "is written" -)))) (600 . ((#s(triple 600 "is written" eq?)) #s(triple 599 "has child" 600))) (603 . ((#s(triple 603 "is written" quote)) #s(triple 602 "has child" 603))) (602 . ((#s(triple 602 "has child" 603) #s(triple 602 "has child" 604) #s(triple 602 "is written" -)) #s(triple 599 "has child" 602))) (605 . ((#s(triple 605 "has child" 606) #s(triple 605 "has child" 607) #s(triple 605 "has child" 608) #s(triple 605 "is written" -)) #s(triple 598 "has child" 605))) (604 . ((#s(triple 604 "is written" left)) #s(triple 602 "has child" 604))) (607 . ((#s(triple 607 "is written" Selected-tree)) #s(triple 605 "has child" 607))) (606 . ((#s(triple 606 "is written" set-whole-tree-offset-y!)) #s(triple 605 "has child" 606))) (593 . ((#s(triple 593 "is written" *)) #s(triple 592 "has child" 593))) (592 . ((#s(triple 592 "has child" 593) #s(triple 592 "has child" 594) #s(triple 592 "has child" 595) #s(triple 592 "is written" -)) #s(triple 589 "has child" 592))) (595 . ((#s(triple 595 "has child" 596) #s(triple 595 "has child" 597) #s(triple 595 "is written" -)) #s(triple 592 "has child" 595))) (594 . ((#s(triple 594 "is written" 1.2)) #s(triple 592 "has child" 594))) (597 . ((#s(triple 597 "is written" Selected-tree)) #s(triple 595 "has child" 597))) (596 . ((#s(triple 596 "is written" whole-tree-zoom)) #s(triple 595 "has child" 596))) (599 . ((#s(triple 599 "has child" 600) #s(triple 599 "has child" 566) #s(triple 599 "has child" 602) #s(triple 599 "is written" -)) #s(triple 598 "has child" 599))) (598 . ((#s(triple 598 "has child" 599) #s(triple 598 "has child" 605) #s(triple 598 "is written" -)) #s(triple 559 "has child" 598))) (617 . ((#s(triple 617 "is written" -)))) (616 . ((#s(triple 616 "is written" eq?)))) (619 . ((#s(triple 619 "is written" eq?)) #s(triple 618 "has child" 619))) (618 . ((#s(triple 618 "has child" 619) #s(triple 618 "has child" 566) #s(triple 618 "has child" 621) #s(triple 618 "is written" -)) #s(triple 615 "has child" 618))) (621 . ((#s(triple 621 "has child" 622) #s(triple 621 "has child" 623) #s(triple 621 "is written" -)) #s(triple 618 "has child" 621))) (620 . ((#s(triple 620 "is written" -)))) (623 . ((#s(triple 623 "is written" right)) #s(triple 621 "has child" 623))) (622 . ((#s(triple 622 "is written" quote)) #s(triple 621 "has child" 622))) (609 . ((#s(triple 609 "is written" +)) #s(triple 608 "has child" 609))) (608 . ((#s(triple 608 "has child" 609) #s(triple 608 "has child" 611) #s(triple 608 "has child" 612) #s(triple 608 "is written" -)) #s(triple 605 "has child" 608))) (611 . ((#s(triple 611 "is written" SCROLLDIST)) #s(triple 608 "has child" 611))) (610 . ((#s(triple 610 "is written" -)))) (613 . ((#s(triple 613 "is written" whole-tree-offset-y)) #s(triple 612 "has child" 613))) (612 . ((#s(triple 612 "has child" 613) #s(triple 612 "has child" 614) #s(triple 612 "is written" -)) #s(triple 608 "has child" 612))) (615 . ((#s(triple 615 "has child" 618) #s(triple 615 "has child" 624) #s(triple 615 "is written" -)) #s(triple 559 "has child" 615))) (614 . ((#s(triple 614 "is written" Selected-tree)) #s(triple 612 "has child" 614))) (633 . ((#s(triple 633 "is written" whole-tree-offset-y)) #s(triple 632 "has child" 633))) (632 . ((#s(triple 632 "has child" 633) #s(triple 632 "has child" 634) #s(triple 632 "is written" -)) #s(triple 627 "has child" 632))) (635 . ((#s(triple 635 "is written" -)))) (634 . ((#s(triple 634 "is written" Selected-tree)) #s(triple 632 "has child" 634))) (637 . ((#s(triple 637 "is written" arger) #s(triple 637 "is reified as" a637)) #s(triple 436 "has formal arg" 637) #s(triple 636 "is defined as" 637))) (636 . ((#s(triple 636 "is defined as" 637) #s(triple 636 "has env" 435) #s(triple 636 "is named" tree)) #s(triple 435 "has child" 636))) (639 . ((#s(triple 639 "has child" 439) #s(triple 639 "has child" 453) #s(triple 639 "is written" -)) #s(triple 435 "has child" 639))) (638 . ((#s(triple 638 "is written" -)))) (625 . ((#s(triple 625 "is written" set-whole-tree-offset-y!)) #s(triple 624 "has child" 625))) (624 . ((#s(triple 624 "has child" 625) #s(triple 624 "has child" 626) #s(triple 624 "has child" 627) #s(triple 624 "is written" -)) #s(triple 615 "has child" 624))) (627 . ((#s(triple 627 "has child" 628) #s(triple 627 "has child" 629) #s(triple 627 "has child" 632) #s(triple 627 "is written" -)) #s(triple 624 "has child" 627))) (626 . ((#s(triple 626 "is written" Selected-tree)) #s(triple 624 "has child" 626))) (629 . ((#s(triple 629 "has child" 630) #s(triple 629 "has child" 631) #s(triple 629 "is written" -)) #s(triple 627 "has child" 629))) (628 . ((#s(triple 628 "is written" +)) #s(triple 627 "has child" 628))) (631 . ((#s(triple 631 "is written" SCROLLDIST)) #s(triple 629 "has child" 631))) (630 . ((#s(triple 630 "is written" -)) #s(triple 629 "has child" 630))) (642 . ((#s(triple 642 "is defined as" 643) #s(triple 642 "has env" 559) #s(triple 642 "is named" event)))) (643 . ((#s(triple 643 "is written" arger) #s(triple 643 "is reified as" a643)) #s(triple 560 "has formal arg" 643) #s(triple 642 "is defined as" 643))) (640 . ((#s(triple 640 "is written" -)))) (641 . ((#s(triple 641 "is written" -)))) (644 . (() #s(triple next-id "is" 644))) (1.2 . (() #s(triple 578 "is written" 1.2) #s(triple 594 "is written" 1.2))))