#lang racket

(require "../core/common.rkt")
(require "../core/disp.rkt")

(provide data)

(define (nth-child n event)
 (if (> (length (utterance-args (whole-tree-selection-u Selected-tree))) n)
  (select (list-ref (utterance-args (whole-tree-selection-u Selected-tree)) n) Selected-tree)
  (select (last (utterance-args (whole-tree-selection-u Selected-tree))) Selected-tree))
 (generate-utterance-tree Selected-tree)
 (send Thecanvas on-paint))

(define (new-tree event)
 (add-to-screen (node-data (utterance-node (whole-tree-selection-u Selected-tree))) (whole-tree-childfunc Selected-tree))
 (generate-utterance-tree Selected-tree)
 (send Thecanvas on-paint))

(define (replace-major-tree event)
 (let* ((tree (cadr Trees))
        (n (root->node (node-data (utterance-node (whole-tree-selection-u Selected-tree))) (whole-tree-childfunc tree) '())))
  (set-whole-tree-n-tree! tree n)
  (set-whole-tree-utterance-tree! tree ((v11n-node->v11n-utterance (whole-tree-v11n tree)) (whole-tree-n-tree tree) tree))
;  (set-whole-tree-utterance-tree! tree ((v11n-node->v11n-utterance (whole-tree-v11n tree)) (whole-tree-n-tree tree) 0 0 0 0 '() tree))
  (set-whole-tree-selection! tree '())
  (set-whole-tree-offset-x! tree 0)
  (set-whole-tree-offset-y! tree 0)
  (set-selected-tree tree))
 (generate-utterance-tree Selected-tree)
 (send Thecanvas on-paint))

(define (select-new-tree event)
 (set-selected-tree
  (if (send event get-shift-down)
   (let ((r (member Selected-tree (reverse Trees))))
    (if (null? (cdddr r))
     (last Trees)
     (cadr r)))
   (let ((r (member Selected-tree Trees)))
    (if (null? (cdr r))
     (if (null? (cdr Trees))
      (car Trees)
      (caddr Trees))
     (cadr r)))))
 (generate-utterance-tree Selected-tree)
 (send Thecanvas on-paint))

(define (zoom-out event)
 (set-whole-tree-offset-x! Selected-tree (- (cartesian-utterance-y (whole-tree-selection-u Selected-tree))))
 (set-whole-tree-offset-y! Selected-tree (- (cartesian-utterance-x (whole-tree-selection-u Selected-tree))))
 (set-whole-tree-zoom! Selected-tree (if (= (whole-tree-zoom Selected-tree) 1) (if VERTICAL (/ (whole-tree-h Selected-tree) (cartesian-utterance-h (whole-tree-selection-u Selected-tree))) (/ (whole-tree-w Selected-tree) (cartesian-utterance-w (whole-tree-selection-u Selected-tree) ))) 1))
 (send Thecanvas on-paint))

(define (go dir tree)
 (let ((new-sel (apply (v11n-find-utterance (whole-tree-v11n tree)) (whole-tree-utterance-tree tree)
                 (cond
                  ((eq? dir 'left)
                   (list (+ (cartesian-utterance-x (whole-tree-selection-u tree)) -1) (cartesian-utterance-y (whole-tree-selection-u tree)) tree))
                  ((eq? dir 'down)
                   (list (cartesian-utterance-x (whole-tree-selection-u tree)) (+ (cartesian-utterance-y (whole-tree-selection-u tree)) (cartesian-utterance-h (whole-tree-selection-u tree)) 1) tree))
                  ((eq? dir 'up)
                   (list (cartesian-utterance-x (whole-tree-selection-u tree)) (+ (cartesian-utterance-y (whole-tree-selection-u tree)) -1) tree))
                  ((eq? dir 'right)
                   (list (+ (cartesian-utterance-x (whole-tree-selection-u tree)) (cartesian-utterance-w (whole-tree-selection-u tree)) 1) (cartesian-utterance-y (whole-tree-selection-u tree)) tree))))))
 (select (if new-sel new-sel (whole-tree-selection-u tree)) tree))
 (generate-utterance-tree tree)
 (send Thecanvas on-paint))

(define data
 (list
    '(#\n new-tree) new-tree
    '(#\N relace-major-tree) replace-major-tree
    '(#\tab cycle-tree) select-new-tree
    '(#\q close-tree) (lambda (_) (remove-tree Selected-tree))
    '(#\h left) (lambda (_) (go 'left Selected-tree))
    '(#\j down) (lambda (_) (go 'down Selected-tree))
    '(#\k up) (lambda (_) (go 'up Selected-tree))
    '(#\l right) (lambda (_) (go 'right Selected-tree))
    '(#\A semantic-left) (lambda (_) (semantic-go 'left Selected-tree))
    '(#\S semantic-down) (lambda (_) (semantic-go 'down Selected-tree))
    '(#\W semantic-up) (lambda (_) (semantic-go 'up Selected-tree))
    '(#\D semantic-right) (lambda (_) (semantic-go 'right Selected-tree))
    '(#\o shallow-open) (lambda (_) (open-u (whole-tree-selection-u Selected-tree) #f Selected-tree) (send Thecanvas on-paint))
    '(#\c shallow-close) (lambda (_) (close-u (whole-tree-selection-u Selected-tree) #f Selected-tree) (send Thecanvas on-paint))
    '(#\O deep-open) (lambda (_) (open-u (whole-tree-selection-u Selected-tree) #t Selected-tree) (send Thecanvas on-paint))
    '(#\C deep-close) (lambda (_) (close-u (whole-tree-selection-u Selected-tree) #t Selected-tree) (send Thecanvas on-paint))
    '(#\z zoom) zoom-out
    '(#\V cycle-v11n) cycle-v11n
    '(#\0 0) (curry nth-child 0)
    '(#\1 1) (curry nth-child 1)
    '(#\2 2) (curry nth-child 2)
    '(#\3 3) (curry nth-child 3)
    '(#\4 4) (curry nth-child 4)
    '(#\5 5) (curry nth-child 5)
    '(#\6 6) (curry nth-child 6)
    '(#\7 7) (curry nth-child 7)
    '(#\8 8) (curry nth-child 8)
    '(#\9 9) (curry nth-child 9)
    '(wheel-up) (lambda (event)
               (if (or (send event get-control-down) (send event get-shift-down) (send event get-meta-down))
                (begin
                 (if (send event get-control-down)
                  (set-VAR1 (max (min (+ VAR1 VAR1OFFSET) VAR1MAX) VAR1MIN))
                  '())
                 (if (send event get-shift-down)
                  (set-VAR2 (max (min (+ VAR2 VAR2OFFSET) VAR2MAX) VAR2MIN))
                  '())
                 (if (send event get-meta-down)
                  (set-VAR3 (max (min (+ VAR3 VAR3OFFSET) VAR3MAX) VAR3MIN))
                  '())
                 (generate-utterance-tree Selected-tree))
                ((v11n-wheel (whole-tree-v11n Selected-tree)) 'up event))
               (send Thecanvas on-paint))
    '(wheel-down) (lambda (event)
                 (if (or (send event get-control-down) (send event get-shift-down) (send event get-meta-down))
                  (begin
                   (if (send event get-control-down)
                    (set-VAR1 (max (min (- VAR1 VAR1OFFSET) VAR1MAX) VAR1MIN))
                    '())
                   (if (send event get-shift-down)
                    (set-VAR2 (max (min (- VAR2 VAR2OFFSET) VAR2MAX) VAR2MIN))
                    '())
                   (if (send event get-meta-down)
                    (set-VAR3 (max (min (- VAR3 VAR3OFFSET) VAR3MAX) VAR3MIN))
                    '())
                   (generate-utterance-tree Selected-tree))
                  ((v11n-wheel (whole-tree-v11n Selected-tree)) 'down event))
                 (send Thecanvas on-paint))
    '(wheel-left) (lambda (event) ((v11n-wheel (whole-tree-v11n Selected-tree)) 'left event) (send Thecanvas on-paint))
    '(wheel-right) (lambda (event) ((v11n-wheel (whole-tree-v11n Selected-tree)) 'right event) (send Thecanvas on-paint))
    ))

